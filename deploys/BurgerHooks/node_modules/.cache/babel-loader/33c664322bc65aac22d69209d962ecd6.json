{"ast":null,"code":"import _defineProperty from \"/home/felipe/Desktop/workspace/burger-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/felipe/Desktop/workspace/burger-app/src/containers/Checkout/ContactData/ContactData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: ''\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: ''\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: ''\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your e-Mail'\n          },\n          value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      console.log(this.props.ingredients);\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      console.log(event.target.value);\n\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      change: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Enter your contact detail\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","axios","Spinner","Button","classes","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","console","log","props","ingredients","preventDefault","setState","formData","formElementIdentifier","order","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","target","updatedOrderForm","updatedFormElement","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n    state ={\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: ''\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: ''\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: ''\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: ''\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your e-Mail'\n                },\n                value: ''\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'},\n                ]\n                },\n                value: ''\n            },\n        },\n        loading: false\n    }\n\n    orderHandler = (event) => {\n        console.log(this.props.ingredients);\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData\n        }\n        axios.post( '/orders.json', order )\n            .then( response => {\n                this.setState( { loading: false } );\n                this.props.history.push('/');\n            } )\n            .catch( error => {\n                this.setState( { loading: false } );\n            } );\n    }\n\n    inputChangedHandler =(event, inputIdentifier) => {\n        console.log(event.target.value);\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        this.setState({orderForm: updatedOrderForm});\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        change={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\">Order</Button>\n            </form>);\n        if(this.state.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact detail</h4>\n                {form}        \n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}