{"ast":null,"code":"import _defineProperty from \"/home/felipe/Desktop/workspace/burger-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/felipe/Desktop/workspace/burger-app/src/containers/Checkout/ContactData/ContactData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 10\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your e-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      thisFormIsValid: false\n    };\n\n    this.orderHandler = event => {\n      console.log(this.props.ings);\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData\n      };\n      this.props.onOrderBurger(order);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      console.log(event.target.value);\n\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidaity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      let formIsValid = true;\n\n      for (inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        thisFormIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidaity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9._%+!$&*=^|~#%'`?{}/-]+@([a-z0-9-]+\\.){1,}([a-z]{2,16})/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      change: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.thisFormIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Enter your contact detail\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","axios","Spinner","Button","classes","Input","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","thisFormIsValid","orderHandler","event","console","log","props","ings","preventDefault","formData","formElementIdentifier","order","ingredients","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","target","updatedOrderForm","updatedFormElement","checkValidaity","formIsValid","setState","rules","isValid","trim","length","isEmail","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n    state ={\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 10\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your e-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'},\n                ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        thisFormIsValid: false,\n    }\n\n    checkValidaity(value, rules) {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if(rules.isEmail) {\n            const pattern = /[a-z0-9._%+!$&*=^|~#%'`?{}/-]+@([a-z0-9-]+\\.){1,}([a-z]{2,16})/\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    }\n\n    orderHandler = (event) => {\n        console.log(this.props.ings);\n        event.preventDefault();\n        \n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData\n        }\n\n        this.props.onOrderBurger(order);\n    }\n\n    inputChangedHandler =(event, inputIdentifier) => {\n        console.log(event.target.value);\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidaity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n\n        let formIsValid = true;\n        for(inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({orderForm: updatedOrderForm, thisFormIsValid: formIsValid});\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        change={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.thisFormIsValid}>Order</Button>\n            </form>);\n        if(this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact detail</h4>\n                {form}        \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n    };\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}