{"ast":null,"code":"import _defineProperty from \"/home/felipe/Desktop/workspace/burger-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  orders: [],\n  loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.PURCHASE_BURGER_START:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case actionTypes.PURCHASE_BURGER_SUCCESS:\n      const newOrder = _objectSpread({}, action.orderData, {\n        id: action.id\n      });\n\n      return _objectSpread({}, state, {\n        loading: false,\n        orders: state.orders.concat(newOrder)\n      });\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return _objectSpread({}, state, {\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/store/reducers/order.js"],"names":["actionTypes","initialState","orders","loading","reducer","state","action","type","PURCHASE_BURGER_START","PURCHASE_BURGER_SUCCESS","newOrder","orderData","id","concat","FETCH_INGREDIENTS_FAILED"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,qBAAjB;AACI,+BACOH,KADP;AAEIF,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKH,WAAW,CAACS,uBAAjB;AACI,YAAMC,QAAQ,qBACHJ,MAAM,CAACK,SADJ;AAENC,QAAAA,EAAE,EAAEN,MAAM,CAACM;AAFL,QAAd;;AAIA,+BACOP,KADP;AAEIF,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,CAAaW,MAAb,CAAoBH,QAApB;AAHZ;;AAKJ,SAAKV,WAAW,CAACc,wBAAjB;AACI,+BACOT,KADP;AAEIF,QAAAA,OAAO,EAAE;AAFb;;AAIJ;AACI,aAAOE,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    orders: [],\n    loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.PURCHASE_BURGER_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.PURCHASE_BURGER_SUCCESS:\n            const newOrder = {\n                    ...action.orderData,\n                    id: action.id\n            };\n            return {\n                ...state,\n                loading: false,\n                orders: state.orders.concat(newOrder)\n            };\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\n            return {\n                ...state,\n                loading: false\n            };\n        default:\n            return state;        \n    }\n};\n\nexport default reducer; "]},"metadata":{},"sourceType":"module"}