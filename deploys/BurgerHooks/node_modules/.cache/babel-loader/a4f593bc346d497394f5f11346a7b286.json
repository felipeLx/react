{"ast":null,"code":"import { delay } from 'redux-saga/dist';\nimport { put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as actions from '../actions/index';\nexport function* logoutSaga(action) {\n  yield call([localStorage, 'removeItem'], \"token\");\n  yield call([localStorage, 'removeItem'], \"expirationDate\");\n  yield call([localStorage, 'removeItem'], \"userId\");\n  yield put(actions.logoutSucceed());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n    returnSecureToken: true\n  };\n  let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n\n  if (!action.isSignUp) {\n    url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n  }\n\n  try {\n    const response = yield axios.post(url, authData); // console.log(response);\n\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem('token', response.data.idToken);\n    yield localStorage.setItem('expirationDate', expirationDate);\n    yield localStorage.setItem('userId', response.data.localId);\n    yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n    yield put(actions.checkAuthTimeout(response.data.expiresIn));\n  } catch (error) {\n    console.log(error);\n    yield put(actions.authFail(error.response.data.error));\n  }\n}\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem('token');\n\n  if (!token) {\n    yield put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout());\n    } else {\n      const userId = yield localStorage.getItem('userId');\n      yield put(actions.authSuccess(token, userId));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/store/sagas/auth.js"],"names":["delay","put","call","axios","actions","logoutSaga","action","localStorage","logoutSucceed","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","password","returnSecureToken","url","isSignUp","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","error","console","log","authFail","authCheckStateSaga","token","getItem","userId"],"mappings":"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","sourcesContent":["import { delay } from 'redux-saga/dist';\nimport { put, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport * as actions from '../actions/index';\n\nexport function* logoutSaga(action) {\n    yield call([localStorage, 'removeItem'], \"token\");\n    yield call([localStorage, 'removeItem'], \"expirationDate\");\n    yield call([localStorage, 'removeItem'], \"userId\");\n    yield put(actions.logoutSucceed());\n}\n\nexport function* checkAuthTimeoutSaga (action){\n    yield delay(action.expirationTime * 1000);\n    yield put(actions.logout());\n}\n\nexport function* authUserSaga(action) {\n    yield put(actions.authStart());\n        const authData = {\n            email: action.email,\n            password: action.password,\n            returnSecureToken: true\n        };\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n        if(!action.isSignUp) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n        }\n        try{\n        const response = yield axios.post(url, authData)\n            \n        // console.log(response);\n        const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n        yield localStorage.setItem('token', response.data.idToken);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userId', response.data.localId);\n        yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n        yield put(actions.checkAuthTimeout(response.data.expiresIn));\n            } catch(error) {\n                console.log(error);\n                yield put(actions.authFail(error.response.data.error));\n            }        \n}\n\nexport function* authCheckStateSaga(action) {\n    const token = yield localStorage.getItem('token');\n        if(!token) {\n            yield put(actions.logout());\n        } else {\n            const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n            if(expirationDate <= new Date()) {\n                yield put(actions.logout());\n            } else {\n                const userId = yield localStorage.getItem('userId');\n                yield put(actions.authSuccess(token, userId));\n                yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n            }\n        }\n}\n\n"]},"metadata":{},"sourceType":"module"}