{"ast":null,"code":"import _defineProperty from \"/home/felipe/Desktop/workspace/burger-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { put } from 'redux-saga/effects';\nimport axios from '../../axios-orders';\nimport * as actions from '../actions/index';\nexport function* purchaseBurgerSaga(action) {\n  yield put(actions.purchaseBurgerStart());\n\n  try {\n    const response = yield axios.post('/orders.json?auth=' + action.token, action.orderData); //console.log( response.data );\n\n    yield put(actions.purchaseBurgerSuccess(response.data.name, action.orderData));\n  } catch (error) {\n    yield put(actions.purchaseBurgerFail(error));\n  }\n}\nexport function* fetchOrdersSaga(action) {\n  yield put(actions.fetchOrdersStart());\n  const queryParams = '?auth=' + action.token + '&orderBy=\"userId\"&equalTo=\"' + action.userId + '\"';\n\n  try {\n    const response = yield axios.get('/orders.json' + queryParams);\n    const fetchedOrders = [];\n\n    for (let key in response.data) {\n      fetchedOrders.push(_objectSpread({}, response.data[key], {\n        id: key\n      }));\n    }\n\n    yield put(actions.fetchOrdersSuccess(fetchedOrders));\n  } catch (error) {\n    yield put(actions.fetchOrdersFail(error));\n  }\n}","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/store/sagas/order.js"],"names":["put","axios","actions","purchaseBurgerSaga","action","purchaseBurgerStart","response","post","token","orderData","purchaseBurgerSuccess","data","name","error","purchaseBurgerFail","fetchOrdersSaga","fetchOrdersStart","queryParams","userId","get","fetchedOrders","key","push","id","fetchOrdersSuccess","fetchOrdersFail"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AAExC,QAAMJ,GAAG,CAAEE,OAAO,CAACG,mBAAR,EAAF,CAAT;;AACA,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAY,uBAAuBH,MAAM,CAACI,KAA1C,EAAiDJ,MAAM,CAACK,SAAxD,CAAvB,CADD,CAEC;;AACA,UAAMT,GAAG,CAAEE,OAAO,CAACQ,qBAAR,CAA+BJ,QAAQ,CAACK,IAAT,CAAcC,IAA7C,EAAmDR,MAAM,CAACK,SAA1D,CAAF,CAAT;AACC,GAJL,CAIM,OAAMI,KAAN,EAAc;AACR,UAAMb,GAAG,CAAEE,OAAO,CAACY,kBAAR,CAA4BD,KAA5B,CAAF,CAAT;AACP;AACR;AAED,OAAO,UAAUE,eAAV,CAA0BX,MAA1B,EAAkC;AACrC,QAAMJ,GAAG,CAACE,OAAO,CAACc,gBAAR,EAAD,CAAT;AACI,QAAMC,WAAW,GAAG,WAAWb,MAAM,CAACI,KAAlB,GAA0B,6BAA1B,GAA0DJ,MAAM,CAACc,MAAjE,GAA0E,GAA9F;;AACA,MAAG;AACC,UAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACkB,GAAN,CAAW,iBAAiBF,WAA5B,CAAvB;AACA,UAAMG,aAAa,GAAG,EAAtB;;AACI,SAAM,IAAIC,GAAV,IAAiBf,QAAQ,CAACK,IAA1B,EAAiC;AAC7BS,MAAAA,aAAa,CAACE,IAAd,mBACOhB,QAAQ,CAACK,IAAT,CAAcU,GAAd,CADP;AAEIE,QAAAA,EAAE,EAAEF;AAFR;AAIH;;AACD,UAAMrB,GAAG,CAACE,OAAO,CAACsB,kBAAR,CAA2BJ,aAA3B,CAAD,CAAT;AACP,GAVD,CAUE,OAAMP,KAAN,EAAa;AACX,UAAMb,GAAG,CAACE,OAAO,CAACuB,eAAR,CAAwBZ,KAAxB,CAAD,CAAT;AACD;AACN","sourcesContent":["import { put } from 'redux-saga/effects';\nimport axios from '../../axios-orders';\n\nimport * as actions from '../actions/index';\n\nexport function* purchaseBurgerSaga(action) {\n    \n    yield put( actions.purchaseBurgerStart() );\n    try{\n        const response = yield axios.post( '/orders.json?auth=' + action.token, action.orderData )\n        //console.log( response.data );\n        yield put( actions.purchaseBurgerSuccess( response.data.name, action.orderData ) );\n        } catch(error)  {\n                yield put( actions.purchaseBurgerFail( error ) );\n        } \n}\n\nexport function* fetchOrdersSaga(action) {\n    yield put(actions.fetchOrdersStart());\n        const queryParams = '?auth=' + action.token + '&orderBy=\"userId\"&equalTo=\"' + action.userId + '\"';\n        try{\n            const response = yield axios.get( '/orders.json' + queryParams );\n            const fetchedOrders = [];\n                for ( let key in response.data ) {\n                    fetchedOrders.push( {\n                        ...response.data[key],\n                        id: key\n                    } );\n                }\n                yield put(actions.fetchOrdersSuccess(fetchedOrders));    \n        } catch(error) {\n            yield put(actions.fetchOrdersFail(error));\n          }\n    } "]},"metadata":{},"sourceType":"module"}