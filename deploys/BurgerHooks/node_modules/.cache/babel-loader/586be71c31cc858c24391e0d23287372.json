{"ast":null,"code":"var _this=this;import*as actionTypes from'./actionTypes';import axios from'axios';export var authStart=function authStart(){return{type:actionTypes.AUTH_START};};export var authSuccess=function authSuccess(token,userId){return{type:actionTypes.AUTH_SUCCESS,idToken:token,userId:userId};};export var authFail=function authFail(error){return{type:actionTypes.AUTH_SUCCESS,error:error};};export var logout=function logout(){localStorage.removeItem('token');localStorage.removeItem('expirationDate');localStorage.removeItem('userId');return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeout=function checkAuthTimeout(expirationTime){return function(dispatch){setTimeout(function(){dispatch(_this.logout());},expirationTime*1000);};};export var auth=function auth(email,password,isSignUp){return function(dispatch){dispatch(authStart());var authData={email:email,password:password,returnSecureToken:true};var url='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';if(!isSignUp){url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';}axios.post(url,authData).then(function(response){console.log(response);var expirationDate=new Date(new Date().getTime()+response.data.expiresIn*1000);localStorage.setItem('token',response.data.idToken);localStorage.setItem('expirationDate',expirationDate);localStorage.setItem('userId',response.data.localId);dispatch(authSuccess(response.data.idToken,response.data.localId));dispatch(checkAuthTimeout(response.data.expiresIn));}).catch(function(err){console.log(err);dispatch(authFail(err.response.data.error));});};};export var setAuthRedirectPath=function setAuthRedirectPath(path){return{type:actionTypes.SET_AUTH_REDIRECT_PATH,path:path};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem('token');if(!token){dispatch(logout());}else{var expirationDate=new Date(localStorage.getItem('expirationDate'));if(expirationDate<=new Date()){dispatch(logout());}else{var userId=localStorage.getItem('userId');dispatch(authSuccess(token,userId));dispatch(checkAuthTimeout((expirationDate.getTime()-new Date().getTime())/1000));}}};};","map":{"version":3,"sources":["/home/felipe/Desktop/workspace/burger-app/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {  \n            dispatch(this.logout()); \n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignUp) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n        if(!isSignUp) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACmBSN1k_Uhyn_789r5gmM0xd0dL2VdGE';\n        }\n        axios.post(url, authData)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', response.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userId', response.data.localId);\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authFail(err.response.data.error));\n            })\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if(expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n            }\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}