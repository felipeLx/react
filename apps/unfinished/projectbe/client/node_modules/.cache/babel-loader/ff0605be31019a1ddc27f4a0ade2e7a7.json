{"ast":null,"code":"import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar statusIdle = 'idle';\nvar statusLoading = 'loading';\nvar statusError = 'error';\nvar statusSuccess = 'success';\nvar _uid = 0;\n\nvar uid = function uid() {\n  return _uid++;\n};\n\nvar cancelledError = {};\nvar isServer = typeof window === 'undefined';\n\nvar noop = function noop() {};\n\nvar identity = function identity(d) {\n  return d;\n};\n\nvar Console = console || {\n  error: noop,\n  warn: noop,\n  log: noop\n};\n\nfunction setConsole(c) {\n  Console = c;\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction stableStringifyReplacer(_, value) {\n  return isObject(value) ? Object.assign.apply(Object, [{}].concat(Object.keys(value).sort().map(function (key) {\n    var _ref;\n\n    return _ref = {}, _ref[key] = value[key], _ref;\n  }))) : value;\n}\n\nfunction stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer);\n}\n\nfunction isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a);\n}\n\nfunction deepIncludes(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(function (key) {\n      return !deepIncludes(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction isDocumentVisible() {\n  return typeof document === 'undefined' || document.visibilityState === undefined || document.visibilityState === 'visible' || document.visibilityState === 'prerender';\n}\n\nfunction isOnline() {\n  return navigator.onLine === undefined || navigator.onLine;\n}\n\nfunction getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (args[0].hasOwnProperty('queryKey') && args[0].hasOwnProperty('queryFn')) {\n      var _args$ = args[0],\n          _queryKey = _args$.queryKey,\n          _queryFn = _args$.queryFn,\n          _args$$config = _args$.config,\n          _config = _args$$config === void 0 ? {} : _args$$config;\n\n      return [_queryKey, _queryFn, _config].concat(args.slice(1));\n    } else {\n      throw new Error('queryKey and queryFn keys are required.');\n    }\n  }\n\n  var queryKey = args[0],\n      queryFn = args[1],\n      _args$2 = args[2],\n      config = _args$2 === void 0 ? {} : _args$2,\n      rest = args.slice(3);\n  return [queryKey, queryFn, config].concat(rest);\n}\n\nfunction useMountedCallback(callback) {\n  var mounted = React.useRef(false);\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](function () {\n    mounted.current = true;\n    return function () {\n      return mounted.current = false;\n    };\n  }, []);\n  return React.useCallback(function () {\n    return mounted.current ? callback.apply(void 0, arguments) : void 0;\n  }, [callback]);\n}\n\nfunction handleSuspense(queryInfo) {\n  if (queryInfo.query.config.suspense || queryInfo.query.config.useErrorBoundary) {\n    if (queryInfo.query.state.status === statusError && queryInfo.query.state.throwInErrorBoundary) {\n      throw queryInfo.error;\n    }\n\n    if (queryInfo.query.config.suspense && queryInfo.status !== statusSuccess) {\n      queryInfo.query.wasSuspended = true;\n      throw queryInfo.query.fetch();\n    }\n  }\n} // This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\n\n\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nvar configContext = React.createContext();\nvar DEFAULTS = {\n  shared: {\n    suspense: false,\n    queryKeySerializerFn: defaultQueryKeySerializerFn\n  },\n  queries: {\n    enabled: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false\n  },\n  mutations: {\n    throwOnError: false,\n    onMutate: noop,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false\n  }\n};\nvar defaultConfigRef = {\n  current: DEFAULTS\n};\n\nfunction useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current;\n}\n\nfunction ReactQueryConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configContextValue = useConfigContext();\n  var newConfig = React.useMemo(function () {\n    var _config$shared = config.shared,\n        shared = _config$shared === void 0 ? {} : _config$shared,\n        _config$queries = config.queries,\n        queries = _config$queries === void 0 ? {} : _config$queries,\n        _config$mutations = config.mutations,\n        mutations = _config$mutations === void 0 ? {} : _config$mutations;\n    var _configContextValue$s = configContextValue.shared,\n        contextShared = _configContextValue$s === void 0 ? {} : _configContextValue$s,\n        _configContextValue$q = configContextValue.queries,\n        contextQueries = _configContextValue$q === void 0 ? {} : _configContextValue$q,\n        _configContextValue$m = configContextValue.mutations,\n        contextMutations = _configContextValue$m === void 0 ? {} : _configContextValue$m;\n    return {\n      shared: _extends({}, contextShared, shared),\n      queries: _extends({}, contextQueries, queries),\n      mutations: _extends({}, contextMutations, mutations)\n    };\n  }, [config, configContextValue]);\n  React.useEffect(function () {\n    // restore previous config on unmount\n    return function () {\n      defaultConfigRef.current = _extends({}, configContextValue || DEFAULTS);\n    };\n  }, [configContextValue]);\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig;\n  }\n\n  return /*#__PURE__*/React.createElement(configContext.Provider, {\n    value: newConfig\n  }, children);\n}\n\nfunction invalidQueryKey() {\n  throw new Error('A valid query key is required!');\n}\n\nfunction defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    invalidQueryKey();\n  }\n\n  if (!Array.isArray(queryKey)) {\n    queryKey = [queryKey];\n  }\n\n  if (queryKey.some(function (d) {\n    return typeof d === 'function';\n  })) {\n    invalidQueryKey();\n  }\n\n  var queryHash = stableStringify(queryKey);\n  queryKey = JSON.parse(queryHash);\n\n  if (!queryHash) {\n    invalidQueryKey();\n  }\n\n  return [queryHash, queryKey];\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _empty() {}\n\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _continueIgnored(value) {\n  if (value && value.then) {\n    return value.then(_empty);\n  }\n}\n\nvar queryCache = makeQueryCache();\nvar queryCacheContext = React.createContext(queryCache);\nvar queryCaches = [queryCache];\n\nvar useQueryCache = function useQueryCache() {\n  return React.useContext(queryCacheContext);\n};\n\nfunction ReactQueryCacheProvider(_ref) {\n  var queryCache = _ref.queryCache,\n      children = _ref.children;\n  var resolvedQueryCache = React.useMemo(function () {\n    return queryCache || makeQueryCache();\n  }, [queryCache]);\n  React.useEffect(function () {\n    queryCaches.push(resolvedQueryCache);\n    return function () {\n      // remove the cache from the active list\n      var i = queryCaches.indexOf(resolvedQueryCache);\n\n      if (i > -1) {\n        queryCaches.splice(i, 1);\n      } // if the resolvedQueryCache was created by us, we need to tear it down\n\n\n      if (queryCache == null) {\n        resolvedQueryCache.clear();\n      }\n    };\n  }, [resolvedQueryCache, queryCache]);\n  return /*#__PURE__*/React.createElement(queryCacheContext.Provider, {\n    value: resolvedQueryCache\n  }, children);\n}\n\nvar actionInit = 'Init';\nvar actionFailed = 'Failed';\nvar actionMarkStale = 'MarkStale';\nvar actionMarkGC = 'MarkGC';\nvar actionFetch = 'Fetch';\nvar actionSuccess = 'Success';\nvar actionError = 'Error';\nvar actionSetState = 'SetState';\n\nfunction makeQueryCache(_temp) {\n  var _ref2 = _temp === void 0 ? {} : _temp,\n      _ref2$frozen = _ref2.frozen,\n      frozen = _ref2$frozen === void 0 ? isServer : _ref2$frozen,\n      defaultConfig = _ref2.defaultConfig; // A frozen cache does not add new queries to the cache\n\n\n  var globalListeners = [];\n  var configRef = defaultConfig ? {\n    current: defaultConfig\n  } : defaultConfigRef;\n  var queryCache = {\n    queries: {},\n    isFetching: 0\n  };\n\n  var notifyGlobalListeners = function notifyGlobalListeners() {\n    queryCache.isFetching = Object.values(queryCache.queries).reduce(function (acc, query) {\n      return query.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    globalListeners.forEach(function (d) {\n      return d(queryCache);\n    });\n  };\n\n  queryCache.subscribe = function (cb) {\n    globalListeners.push(cb);\n    return function () {\n      globalListeners.splice(globalListeners.indexOf(cb), 1);\n    };\n  };\n\n  queryCache.clear = function (_temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n        _ref3$notify = _ref3.notify,\n        notify = _ref3$notify === void 0 ? true : _ref3$notify;\n\n    Object.values(queryCache.queries).forEach(function (query) {\n      return query.clear();\n    });\n    queryCache.queries = {};\n\n    if (notify) {\n      notifyGlobalListeners();\n    }\n  };\n\n  queryCache.getQueries = function (predicate, _temp3) {\n    var _ref4 = _temp3 === void 0 ? {} : _temp3,\n        exact = _ref4.exact;\n\n    if (predicate === true) {\n      return Object.values(queryCache.queries);\n    }\n\n    if (typeof predicate !== 'function') {\n      var _configRef$current$sh = configRef.current.shared.queryKeySerializerFn(predicate),\n          queryHash = _configRef$current$sh[0],\n          queryKey = _configRef$current$sh[1];\n\n      predicate = function predicate(d) {\n        return exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey);\n      };\n    }\n\n    return Object.values(queryCache.queries).filter(predicate);\n  };\n\n  queryCache.getQuery = function (queryKey) {\n    return queryCache.getQueries(queryKey, {\n      exact: true\n    })[0];\n  };\n\n  queryCache.getQueryData = function (queryKey) {\n    var _queryCache$getQuery;\n\n    return (_queryCache$getQuery = queryCache.getQuery(queryKey)) == null ? void 0 : _queryCache$getQuery.state.data;\n  };\n\n  queryCache.removeQueries = function () {\n    queryCache.getQueries.apply(queryCache, arguments).forEach(function (query) {\n      return query.clear();\n    });\n  };\n\n  queryCache.cancelQueries = function () {\n    queryCache.getQueries.apply(queryCache, arguments).forEach(function (query) {\n      return query.cancel();\n    });\n  };\n\n  queryCache.invalidateQueries = _async(function (predicate, _temp4) {\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n        _ref5$refetchActive = _ref5.refetchActive,\n        refetchActive = _ref5$refetchActive === void 0 ? true : _ref5$refetchActive,\n        exact = _ref5.exact,\n        throwOnError = _ref5.throwOnError;\n\n    return _catch(function () {\n      return _await(Promise.all(queryCache.getQueries(predicate, {\n        exact: exact\n      }).map(function (query) {\n        if (refetchActive && query.instances.length) {\n          return query.fetch();\n        }\n\n        return query.invalidate();\n      })));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  queryCache.resetErrorBoundaries = function () {\n    queryCache.getQueries(true).forEach(function (query) {\n      query.state.throwInErrorBoundary = false;\n    });\n  };\n\n  queryCache.buildQuery = function (userQueryKey, queryFn, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    config = _extends({}, configRef.current.shared, configRef.current.queries, config);\n\n    var _config$queryKeySeria = config.queryKeySerializerFn(userQueryKey),\n        queryHash = _config$queryKeySeria[0],\n        queryKey = _config$queryKeySeria[1];\n\n    var query = queryCache.queries[queryHash];\n\n    if (query) {\n      Object.assign(query, {\n        queryFn: queryFn,\n        config: config\n      });\n    } else {\n      query = makeQuery({\n        queryCache: queryCache,\n        queryKey: queryKey,\n        queryHash: queryHash,\n        queryFn: queryFn,\n        config: config\n      }); // If the query started with data, schedule\n      // a stale timeout\n\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout(); // Simulate a query healing process\n\n        query.heal(); // Schedule for garbage collection in case\n        // nothing subscribes to this query\n\n        query.scheduleGarbageCollection();\n      }\n\n      if (!frozen) {\n        queryCache.queries[queryHash] = query;\n\n        if (isServer) {\n          notifyGlobalListeners();\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(function () {\n            notifyGlobalListeners();\n          });\n        }\n      }\n    }\n\n    query.fallbackInstance = {\n      config: {\n        onSuccess: query.config.onSuccess,\n        onError: query.config.onError,\n        onSettled: query.config.onSettled\n      }\n    };\n    return query;\n  };\n\n  queryCache.prefetchQuery = _async(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _getQueryArgs = getQueryArgs(args),\n        queryKey = _getQueryArgs[0],\n        queryFn = _getQueryArgs[1],\n        config = _getQueryArgs[2],\n        _getQueryArgs$ = _getQueryArgs[3];\n\n    _getQueryArgs$ = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n    var force = _getQueryArgs$.force,\n        throwOnError = _getQueryArgs$.throwOnError;\n    return _catch(function () {\n      var query = queryCache.buildQuery(queryKey, queryFn, config);\n      return _invoke(function () {\n        if (force || query.state.isStale) {\n          return _awaitIgnored(query.fetch());\n        }\n      }, function () {\n        return query.state.data;\n      });\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  queryCache.setQueryData = function (queryKey, updater, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var query = queryCache.getQuery(queryKey);\n\n    if (!query) {\n      query = queryCache.buildQuery(queryKey, function () {\n        return new Promise(noop);\n      }, config);\n    }\n\n    query.setData(updater);\n  };\n\n  function makeQuery(_ref6) {\n    var queryCache = _ref6.queryCache,\n        queryKey = _ref6.queryKey,\n        queryHash = _ref6.queryHash,\n        queryFn = _ref6.queryFn,\n        config = _ref6.config;\n    var initialData = typeof config.initialData === 'function' ? config.initialData() : config.initialData;\n    var hasInitialData = typeof initialData !== 'undefined';\n    var isStale = !config.enabled || !hasInitialData;\n    var initialStatus = hasInitialData ? statusSuccess : config.enabled ? statusLoading : statusIdle;\n    var query = {\n      queryKey: queryKey,\n      queryHash: queryHash,\n      queryFn: queryFn,\n      config: config,\n      instances: [],\n      state: queryReducer(undefined, {\n        type: actionInit,\n        initialStatus: initialStatus,\n        initialData: initialData,\n        hasInitialData: hasInitialData,\n        isStale: isStale\n      })\n    };\n\n    query.dispatch = function (action) {\n      query.state = queryReducer(query.state, action);\n      query.instances.forEach(function (d) {\n        return d.onStateUpdate(query.state);\n      });\n      notifyGlobalListeners();\n    };\n\n    query.scheduleStaleTimeout = function () {\n      if (isServer) return;\n      clearTimeout(query.staleTimeout);\n\n      if (query.config.staleTime === Infinity) {\n        return;\n      }\n\n      query.staleTimeout = setTimeout(function () {\n        if (queryCache.getQuery(query.queryKey)) {\n          query.invalidate();\n        }\n      }, query.config.staleTime);\n    };\n\n    query.invalidate = function () {\n      clearTimeout(query.staleTimeout);\n      query.dispatch({\n        type: actionMarkStale\n      });\n    };\n\n    query.scheduleGarbageCollection = function () {\n      if (query.config.cacheTime === Infinity) {\n        return;\n      }\n\n      query.dispatch({\n        type: actionMarkGC\n      });\n      query.cacheTimeout = setTimeout(function () {\n        queryCache.removeQueries(function (d) {\n          return d.state.markedForGarbageCollection && d.queryHash === query.queryHash;\n        });\n      }, typeof query.state.data === 'undefined' && query.state.status !== 'error' ? 0 : query.config.cacheTime);\n    };\n\n    query.heal = function () {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout); // Mark the query as not cancelled\n\n      query.cancelled = null;\n    };\n\n    query.cancel = function () {\n      query.cancelled = cancelledError;\n\n      if (query.cancelPromises) {\n        query.cancelPromises();\n      }\n\n      delete query.promise;\n    };\n\n    query.clearIntervals = function () {\n      query.instances.forEach(function (instance) {\n        instance.clearInterval();\n      });\n    };\n\n    query.setState = function (updater) {\n      return query.dispatch({\n        type: actionSetState,\n        updater: updater\n      });\n    };\n\n    query.setData = function (updater) {\n      // Set data and mark it as cached\n      query.dispatch({\n        type: actionSuccess,\n        updater: updater\n      }); // Schedule a fresh invalidation!\n\n      query.scheduleStaleTimeout();\n    };\n\n    query.clear = function () {\n      clearTimeout(query.staleTimeout);\n      clearTimeout(query.cacheTimeout);\n      clearTimeout(query.retryTimeout);\n      query.clearIntervals();\n      query.cancel();\n      query.dispatch = noop;\n      delete queryCache.queries[query.queryHash];\n    };\n\n    query.subscribe = function (onStateUpdate) {\n      if (onStateUpdate === void 0) {\n        onStateUpdate = noop;\n      }\n\n      var instance = {\n        id: uid(),\n        onStateUpdate: onStateUpdate\n      };\n      query.instances.push(instance);\n      query.heal();\n\n      instance.clearInterval = function () {\n        clearInterval(instance.refetchIntervalId);\n        delete instance.refetchIntervalId;\n      };\n\n      instance.updateConfig = function (config) {\n        var oldConfig = instance.config; // Update the config\n\n        instance.config = config;\n\n        if (!isServer) {\n          if ((oldConfig == null ? void 0 : oldConfig.refetchInterval) === config.refetchInterval) {\n            return;\n          }\n\n          query.clearIntervals();\n          var minInterval = Math.min.apply(Math, query.instances.map(function (d) {\n            return d.config.refetchInterval || Infinity;\n          }));\n\n          if (!instance.refetchIntervalId && minInterval > 0 && minInterval < Infinity) {\n            instance.refetchIntervalId = setInterval(function () {\n              if (isDocumentVisible() || query.instances.some(function (instance) {\n                return instance.config.refetchIntervalInBackground;\n              })) {\n                query.fetch();\n              }\n            }, minInterval);\n          }\n        }\n      };\n\n      instance.run = _async(function () {\n        return _continueIgnored(_catch(function () {\n          // Perform the refetch for this query if necessary\n          return _invoke(function () {\n            if (query.config.enabled && // Don't auto refetch if disabled\n            !query.wasSuspended && // Don't double refetch for suspense\n            query.state.isStale && ( // Only refetch if stale\n            query.config.refetchOnMount || query.instances.length === 1)) {\n              return _awaitIgnored(query.fetch());\n            }\n          }, function () {\n            query.wasSuspended = false;\n          });\n        }, function (error) {\n          Console.error(error);\n        }));\n      });\n\n      instance.unsubscribe = function () {\n        query.instances = query.instances.filter(function (d) {\n          return d.id !== instance.id;\n        });\n\n        if (!query.instances.length) {\n          query.clearIntervals();\n          query.cancel();\n\n          if (!isServer) {\n            // Schedule garbage collection\n            query.scheduleGarbageCollection();\n          }\n        }\n      };\n\n      return instance;\n    }; // Set up the core fetcher function\n\n\n    var tryFetchData = _async(function (queryFn) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return _catch(function () {\n        // Perform the query\n        var promise = queryFn.apply(void 0, query.config.queryFnParamsFilter(args));\n\n        query.cancelPromises = function () {\n          return promise.cancel == null ? void 0 : promise.cancel();\n        };\n\n        return _await(promise, function (data) {\n          delete query.shouldContinueRetryOnFocus;\n          delete query.cancelPromises;\n          if (query.cancelled) throw query.cancelled;\n          return data;\n        });\n      }, function (error) {\n        var _exit = false;\n        delete query.cancelPromises;\n        if (query.cancelled) throw query.cancelled; // If we fail, increase the failureCount\n\n        query.dispatch({\n          type: actionFailed\n        }); // Do we need to retry the request?\n\n        return _invoke(function () {\n          if (query.config.retry === true || query.state.failureCount <= query.config.retry || typeof query.config.retry === 'function' && query.config.retry(query.state.failureCount, error)) {\n            // Only retry if the document is visible\n            if (!isDocumentVisible()) {\n              // set this flag to continue retries on focus\n              query.shouldContinueRetryOnFocus = true;\n              _exit = true;\n              return new Promise(noop);\n            }\n\n            delete query.shouldContinueRetryOnFocus; // Determine the retryDelay\n\n            var delay = functionalUpdate(query.config.retryDelay, query.state.failureCount); // Return a new promise with the retry\n\n            _exit = true;\n            return _await(new Promise(function (resolve, reject) {\n              // Keep track of the retry timeout\n              query.retryTimeout = setTimeout(_async(function () {\n                return query.cancelled ? reject(query.cancelled) : _catch(function () {\n                  return _await(tryFetchData.apply(void 0, [queryFn].concat(args)), function (data) {\n                    if (query.cancelled) return reject(query.cancelled);\n                    resolve(data);\n                  });\n                }, function (error) {\n                  if (query.cancelled) return reject(query.cancelled);\n                  reject(error);\n                });\n              }), delay);\n            }));\n          }\n        }, function (_result3) {\n          if (_exit) return _result3;\n          throw error;\n        });\n      });\n    });\n\n    query.fetch = _async(function (_temp5) {\n      var _ref7 = _temp5 === void 0 ? {} : _temp5,\n          _ref7$__queryFn = _ref7.__queryFn,\n          __queryFn = _ref7$__queryFn === void 0 ? query.queryFn : _ref7$__queryFn; // Create a new promise for the query cache if necessary\n\n\n      if (!query.promise) {\n        query.promise = _async(function () {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null;\n          var callbackInstances = [].concat(query.instances);\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.fallbackInstance);\n          }\n\n          return _catch(function () {\n            // Set up the query refreshing state\n            query.dispatch({\n              type: actionFetch\n            }); // Try to get the data\n\n            return _await(tryFetchData.apply(void 0, [__queryFn].concat(query.queryKey)), function (data) {\n              query.setData(function (old) {\n                return query.config.isDataEqual(old, data) ? old : data;\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.config.onSuccess && instance.config.onSuccess(query.state.data);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.config.onSettled && instance.config.onSettled(query.state.data, null);\n              });\n              delete query.promise;\n              return data;\n            });\n          }, function (error) {\n            query.dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error: error\n            });\n            delete query.promise;\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(function (instance) {\n                return instance.config.onError && instance.config.onError(error);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.config.onSettled && instance.config.onSettled(undefined, error);\n              });\n              throw error;\n            }\n          });\n        })();\n      }\n\n      return query.promise;\n    });\n    return query;\n  }\n\n  return queryCache;\n}\n\nfunction queryReducer(state, action) {\n  var newState = switchActions(state, action);\n  Object.assign(newState, {\n    isLoading: newState.status === statusLoading,\n    isSuccess: newState.status === statusSuccess,\n    isError: newState.status === statusError,\n    isIdle: newState.status === statusIdle\n  });\n  return newState;\n}\n\nfunction switchActions(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0\n      };\n\n    case actionFailed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case actionMarkStale:\n      return _extends({}, state, {\n        isStale: true\n      });\n\n    case actionMarkGC:\n      {\n        return _extends({}, state, {\n          markedForGarbageCollection: true\n        });\n      }\n\n    case actionFetch:\n      return _extends({}, state, {\n        status: typeof state.data !== 'undefined' ? statusSuccess : statusLoading,\n        isFetching: true,\n        failureCount: 0\n      });\n\n    case actionSuccess:\n      return _extends({}, state, {\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0\n      });\n\n    case actionError:\n      return _extends({}, state, {\n        isFetching: false,\n        isStale: true\n      }, !action.cancelled && {\n        status: statusError,\n        error: action.error,\n        throwInErrorBoundary: true\n      });\n\n    case actionSetState:\n      return functionalUpdate(action.updater, state);\n\n    default:\n      throw new Error();\n  }\n}\n\nvar visibilityChangeEvent = 'visibilitychange';\nvar focusEvent = 'focus';\n\nvar onWindowFocus = function onWindowFocus() {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(function (queryCache) {\n      return queryCache.invalidateQueries(function (query) {\n        if (!query.instances.length) {\n          return false;\n        }\n\n        if (!query.instances.some(function (instance) {\n          return instance.config.enabled;\n        })) {\n          return false;\n        }\n\n        if (!query.state.isStale) {\n          return false;\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so refetching will create new one\n          delete query.promise;\n        }\n\n        return query.config.refetchOnWindowFocus;\n      }).catch(Console.error);\n    });\n  }\n};\n\nvar removePreviousHandler;\n\nfunction setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler();\n  } // Sub the new watcher\n\n\n  removePreviousHandler = callback(onWindowFocus);\n}\n\nsetFocusHandler(function (handleFocus) {\n  var _window; // Listen to visibillitychange and focus\n\n\n  if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false);\n    window.addEventListener(focusEvent, handleFocus, false);\n    return function () {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus);\n      window.removeEventListener(focusEvent, handleFocus);\n    };\n  }\n});\n\nfunction useIsFetching() {\n  var queryCache = useQueryCache();\n\n  var _React$useReducer = React.useReducer(function (d) {\n    return d + 1;\n  }, 1),\n      state = _React$useReducer[0],\n      unsafeRerender = _React$useReducer[1];\n\n  var rerender = useMountedCallback(unsafeRerender);\n  React.useEffect(function () {\n    return queryCache.subscribe(rerender);\n  }, [queryCache, rerender]);\n  return React.useMemo(function () {\n    return state && queryCache.isFetching;\n  }, [queryCache.isFetching, state]);\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    status: statusIdle,\n    data: undefined,\n    error: null\n  };\n};\n\nfunction _empty$1() {}\n\nvar actionReset = {};\n\nfunction _awaitIgnored$1(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty$1) : Promise.resolve();\n  }\n}\n\nvar actionLoading = {};\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar actionResolve = {};\n\nfunction _catch$1(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionReject = {};\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState();\n  }\n\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading\n    };\n  }\n\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data\n    };\n  }\n\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error\n    };\n  }\n\n  throw new Error();\n}\n\nfunction useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var getMutationFn = useGetLatest(mutationFn);\n  var getConfig = useGetLatest(_extends({}, useConfigContext().shared, useConfigContext().mutations, config));\n  var latestMutationRef = React.useRef();\n  var mutate = React.useCallback(_async$1(function (variables, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$onSuccess = _ref.onSuccess,\n        onSuccess = _ref$onSuccess === void 0 ? noop : _ref$onSuccess,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onSettled = _ref.onSettled,\n        onSettled = _ref$onSettled === void 0 ? noop : _ref$onSettled,\n        throwOnError = _ref.throwOnError;\n\n    var config = getConfig();\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = function isLatest() {\n      return latestMutationRef.current === mutationId;\n    };\n\n    dispatch({\n      type: actionLoading\n    });\n    var snapshotValue;\n    return _catch$1(function () {\n      return _await$1(config.onMutate(variables), function (_config$onMutate) {\n        snapshotValue = _config$onMutate;\n        var data;\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _await$1(getMutationFn()(variables), function (_getMutationFn) {\n              data = _getMutationFn;\n            });\n          }\n        }, function () {\n          if (isLatest()) {\n            dispatch({\n              type: actionResolve,\n              data: data\n            });\n          }\n\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored$1(config.onSuccess(data, variables));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored$1(onSuccess(data, variables));\n              }\n            }, function () {\n              return _invoke$1(function () {\n                if (isLatest()) {\n                  return _awaitIgnored$1(config.onSettled(data, null, variables));\n                }\n              }, function () {\n                return _invoke$1(function () {\n                  if (isLatest()) {\n                    return _awaitIgnored$1(onSettled(data, null, variables));\n                  }\n                }, function () {\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      return _invoke$1(function () {\n        if (isLatest()) {\n          Console.error(error);\n          return _awaitIgnored$1(config.onError(error, variables, snapshotValue));\n        }\n      }, function () {\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _awaitIgnored$1(onError(error, variables, snapshotValue));\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored$1(config.onSettled(undefined, error, variables, snapshotValue));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored$1(onSettled(undefined, error, variables, snapshotValue));\n              }\n            }, function () {\n              if (isLatest()) {\n                dispatch({\n                  type: actionReject,\n                  error: error\n                });\n\n                if (throwOnError != null ? throwOnError : config.throwOnError) {\n                  throw error;\n                }\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch, getConfig, getMutationFn]);\n  var reset = React.useCallback(function () {\n    return dispatch({\n      type: actionReset\n    });\n  }, [dispatch]);\n  React.useEffect(function () {\n    var _getConfig = getConfig(),\n        suspense = _getConfig.suspense,\n        useErrorBoundary = _getConfig.useErrorBoundary;\n\n    if ((useErrorBoundary != null ? useErrorBoundary : suspense) && state.error) {\n      throw state.error;\n    }\n  }, [getConfig, state.error]);\n  return [mutate, _extends({}, state, {\n    reset: reset,\n    isIdle: state.status === statusIdle,\n    isLoading: state.status === statusLoading,\n    isSuccess: state.status === statusSuccess,\n    isError: state.status === statusError\n  })];\n}\n\nfunction _empty$2() {}\n\nfunction _awaitIgnored$2(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty$2) : Promise.resolve();\n  }\n}\n\nfunction _catch$2(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _continueIgnored$1(value) {\n  if (value && value.then) {\n    return value.then(_empty$2);\n  }\n}\n\nfunction _async$2(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction useBaseQuery(queryKey, queryFn, config) {\n  if (config === void 0) {\n    config = {};\n  } // Make a rerender function\n\n\n  var rerender = useMountedCallback(React.useState()[1]); // Build the final config\n\n  var configContext = useConfigContext();\n  config = _extends({}, configContext.shared, configContext.queries, config); // Get the query cache\n\n  var queryCache = useQueryCache(); // Build the query for use\n\n  var query = queryCache.buildQuery(queryKey, queryFn, config); // Create a query instance ref\n\n  var instanceRef = React.useRef(); // Subscribe to the query when the subscribe function changes\n\n  React.useEffect(function () {\n    instanceRef.current = query.subscribe(function () {\n      return rerender({});\n    }); // Unsubscribe when things change\n\n    return instanceRef.current.unsubscribe;\n  }, [query, rerender]); // Always update the config\n\n  React.useEffect(function () {\n    instanceRef.current.updateConfig(config);\n  }); // Run the instance when the query or enabled change\n\n  React.useEffect(function () {\n    if (config.enabled && query) ;\n    instanceRef.current.run();\n  }, [config.enabled, query]);\n  var refetch = React.useCallback(_async$2(function () {\n    return _continueIgnored$1(_catch$2(function () {\n      return _awaitIgnored$2(query.fetch());\n    }, function (error) {\n      Console.error(error);\n    }));\n  }), [query]);\n  return _extends({\n    query: query,\n    refetch: refetch\n  }, query.state);\n}\n\nfunction useQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var query = useBaseQuery.apply(void 0, getQueryArgs(args));\n  handleSuspense(query);\n  return query;\n}\n\nfunction usePaginatedQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryFn = _getQueryArgs[1],\n      _getQueryArgs$ = _getQueryArgs[2],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var lastDataRef = React.useRef(); // If latestData is set, don't use initialData\n\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData;\n  }\n\n  var queryInfo = useBaseQuery(queryKey, queryFn, config);\n\n  if (!queryInfo.query.config.enabled) {\n    lastDataRef.current = undefined;\n  }\n\n  var latestData = queryInfo.data,\n      status = queryInfo.status;\n  React.useEffect(function () {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData;\n    }\n  }, [latestData, status]);\n  var resolvedData = latestData;\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current;\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    var overrides = {\n      status: 'success',\n      isError: false,\n      isLoading: false,\n      isSuccess: true\n    };\n    Object.assign(queryInfo.query.state, overrides);\n    Object.assign(queryInfo, overrides);\n  }\n\n  var paginatedQueryInfo = _extends({}, queryInfo, {\n    resolvedData: resolvedData,\n    latestData: latestData\n  });\n\n  handleSuspense(paginatedQueryInfo);\n  return paginatedQueryInfo;\n}\n\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _empty$3() {}\n\nfunction _invokeIgnored(body) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(_empty$3);\n  }\n}\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    var observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nvar _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    var result = new _Pact();\n    var state = this.s;\n\n    if (state) {\n      var callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        var value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _do(body, test) {\n  var awaitBody;\n\n  do {\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.v;\n      } else {\n        awaitBody = true;\n        break;\n      }\n    }\n\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n  } while (!shouldContinue.then);\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    for (;;) {\n      shouldContinue = test();\n\n      if (_isSettledPact(shouldContinue)) {\n        shouldContinue = shouldContinue.v;\n      }\n\n      if (!shouldContinue) {\n        break;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (result && result.then) {\n        if (_isSettledPact(result)) {\n          result = result.v;\n        } else {\n          result.then(_resumeAfterBody).then(void 0, reject);\n          return;\n        }\n      }\n    }\n\n    _settle(pact, 1, result);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      do {\n        result = body();\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_resumeAfterBody).then(void 0, reject);\n            return;\n          }\n        }\n\n        shouldContinue = test();\n\n        if (_isSettledPact(shouldContinue)) {\n          shouldContinue = shouldContinue.v;\n        }\n\n        if (!shouldContinue) {\n          _settle(pact, 1, result);\n\n          return;\n        }\n      } while (!shouldContinue.then);\n\n      shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nfunction _continue(value, then) {\n  return value && value.then ? value.then(then) : then(value);\n}\n\nfunction _async$3(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _rethrow(thrown, value) {\n  if (thrown) throw value;\n  return value;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction useInfiniteQuery() {\n  var queryInfoRef = React.useRef();\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryFn = _getQueryArgs[1],\n      _getQueryArgs$ = _getQueryArgs[2],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var getFetchMore = config.getFetchMore;\n  var getGetFetchMore = useGetLatest(getFetchMore); // The default queryFn will query all pages and map them together\n\n  var originalQueryFn = queryFn;\n  queryFn = _async$3(function () {\n    var _interrupt = false;\n    var data = [];\n    var pageVariables = [].concat(queryInfoRef.current.query.pageVariables);\n    var rebuiltPageVariables = [];\n    return _continue(_do(function () {\n      var args = pageVariables.shift();\n      return _invokeIgnored(function () {\n        if (!data.length) {\n          var _push3 = data.push; // the first page query doesn't need to be rebuilt\n\n          return _await$2(originalQueryFn.apply(void 0, args), function (_originalQueryFn) {\n            _push3.call(data, _originalQueryFn);\n\n            rebuiltPageVariables.push(args);\n          });\n        } else {\n          // get an up-to-date cursor based on the previous data set\n          var nextCursor = getGetFetchMore()(data[data.length - 1], data); // break early if there's no next cursor\n          // otherwise we'll start from the beginning\n          // which will cause unwanted duplication\n\n          if (!nextCursor) {\n            _interrupt = true;\n            return;\n          }\n\n          var pageArgs = [].concat(args.slice(0, -1), [nextCursor]);\n          var _push4 = data.push;\n          return _await$2(originalQueryFn.apply(void 0, pageArgs), function (_originalQueryFn2) {\n            _push4.call(data, _originalQueryFn2);\n\n            rebuiltPageVariables.push(pageArgs);\n          });\n        }\n      });\n    }, function () {\n      return !_interrupt && !!pageVariables.length;\n    }), function () {\n      queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n      queryInfoRef.current.query.pageVariables = rebuiltPageVariables;\n      return data;\n    });\n  });\n  var queryInfo = useBaseQuery(queryKey, queryFn, config);\n\n  if (typeof queryInfo.query.canFetchMore === 'undefined' && typeof queryInfo.data !== 'undefined') {\n    queryInfo.query.canFetchMore = getGetFetchMore()(queryInfo.data[queryInfo.data.length - 1], queryInfo.data);\n  }\n\n  queryInfoRef.current = queryInfo;\n  var _queryInfo$data = queryInfo.data,\n      data = _queryInfo$data === void 0 ? [] : _queryInfo$data,\n      canFetchMore = queryInfo.query.canFetchMore; // Here we seed the pageVariabes for the query\n\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [[].concat(queryInfo.query.queryKey)];\n  }\n\n  var fetchMore = React.useCallback(function (fetchMoreInfo, _temp) {\n    if (fetchMoreInfo === void 0) {\n      fetchMoreInfo = queryInfoRef.current.query.canFetchMore;\n    }\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$previous = _ref.previous,\n        previous = _ref$previous === void 0 ? false : _ref$previous;\n\n    return queryInfoRef.current.query.canFetchMore ? queryInfoRef.current.query.fetch({\n      __queryFn: _async$3(function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _finallyRethrows(function () {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: previous ? 'previous' : 'next'\n            });\n          });\n          var newArgs = previous ? [fetchMoreInfo].concat(args) : [].concat(args, [fetchMoreInfo]);\n          queryInfoRef.current.query.pageVariables[previous ? 'unshift' : 'push'](newArgs);\n          return _await$2(originalQueryFn.apply(void 0, newArgs), function (newData) {\n            var data = previous ? [newData].concat(queryInfoRef.current.data) : [].concat(queryInfoRef.current.data, [newData]);\n            queryInfoRef.current.query.canFetchMore = getGetFetchMore()(newData, data);\n            return data;\n          });\n        }, function (_wasThrown, _result) {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: false\n            });\n          });\n          return _rethrow(_wasThrown, _result);\n        });\n      })\n    }) : void 0;\n  }, [getGetFetchMore, originalQueryFn]);\n  handleSuspense(queryInfo);\n  return _extends({}, queryInfo, {\n    data: data,\n    canFetchMore: canFetchMore,\n    fetchMore: fetchMore\n  });\n}\n\nexport { ReactQueryCacheProvider, ReactQueryConfigProvider, deepIncludes, makeQueryCache, queryCache, queryCaches, setConsole, setFocusHandler, stableStringify, statusError, statusIdle, statusLoading, statusSuccess, useInfiniteQuery, useIsFetching, useMutation, usePaginatedQuery, useQuery, useQueryCache };","map":{"version":3,"sources":["../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useIsFetching.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useQuery.js","../src/usePaginatedQuery.js","../src/useInfiniteQuery.js"],"names":["statusIdle","statusLoading","statusError","statusSuccess","_uid","uid","cancelledError","isServer","noop","identity","Console","console","error","warn","log","ref","React","updater","Object","value","JSON","a","Array","deepIncludes","b","document","navigator","isObject","args","queryKey","queryFn","config","rest","mounted","callback","queryInfo","length","i","deepEqual","keys","key","configContext","DEFAULTS","shared","suspense","queryKeySerializerFn","defaultQueryKeySerializerFn","queries","enabled","retry","retryDelay","Math","staleTime","cacheTime","refetchOnWindowFocus","refetchInterval","queryFnParamsFilter","refetchOnMount","isDataEqual","onError","onSuccess","onSettled","useErrorBoundary","mutations","throwOnError","onMutate","defaultConfigRef","current","children","configContextValue","useConfigContext","newConfig","contextShared","contextQueries","contextMutations","invalidQueryKey","queryHash","stableStringify","queryCache","makeQueryCache","queryCacheContext","queryCaches","useQueryCache","resolvedQueryCache","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","actionSetState","frozen","defaultConfig","globalListeners","configRef","arguments","isFetching","Promise","f","notifyGlobalListeners","query","acc","d","then","subscribe","notify","exact","predicate","refetchActive","makeQuery","setTimeout","force","getQueryArgs","initialData","hasInitialData","isStale","initialStatus","instances","state","queryReducer","type","clearTimeout","instance","onStateUpdate","id","clearInterval","oldConfig","minInterval","setInterval","isDocumentVisible","tryFetchData","promise","delay","functionalUpdate","reject","resolve","__queryFn","callbackInstances","result","body","recover","cancelled","newState","switchActions","isLoading","isSuccess","isError","isIdle","action","status","canFetchMore","failureCount","markedForGarbageCollection","data","updatedAt","Date","throwInErrorBoundary","visibilityChangeEvent","focusEvent","onWindowFocus","isOnline","removePreviousHandler","setFocusHandler","window","unsafeRerender","rerender","useMountedCallback","getDefaultState","actionReset","actionLoading","actionResolve","actionReject","unsafeDispatch","dispatch","getMutationFn","useGetLatest","getConfig","latestMutationRef","mutate","mutationId","isLatest","snapshotValue","reset","instanceRef","refetch","useBaseQuery","handleSuspense","lastDataRef","latestData","resolvedData","overrides","paginatedQueryInfo","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","pageVariables","rebuiltPageVariables","_this","onFulfilled","onRejected","nextCursor","pact","pageArgs","s","observer","thenable","fetchMore","fetchMoreInfo","previous","isFetchingMore","newArgs","awaitBody","shouldContinue","test","finalizer"],"mappings":";;;;;;;;;;;;;;;;;;;;IAIaA,UAAU,GAAG,M;IACbC,aAAa,GAAG,S;IAChBC,WAAW,GAAG,O;IACdC,aAAa,GAAG,S;AAE7B,IAAIC,IAAI,GAAR,CAAA;;AACO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAA;AAAA,SAAMD,IAAN,EAAA;AAAZ,CAAA;;AACA,IAAME,cAAc,GAApB,EAAA;AAEA,IAAMC,QAAQ,GAAG,OAAA,MAAA,KAAjB,WAAA;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,CAAA,EAAC;AAAA,SAAA,CAAA;AAAlB,CAAA;;AACA,IAAIC,OAAO,GAAGC,OAAO,IAAI;AAAEC,EAAAA,KAAK,EAAP,IAAA;AAAeC,EAAAA,IAAI,EAAnB,IAAA;AAA2BC,EAAAA,GAAG,EAAEN;AAAhC,CAAzB;;AAYA,SAAA,UAAA,CAAA,CAAA,EAAuB;AAC5BE,EAAAA,OAAO,GAAPA,CAAAA;AACD;;AAEM,SAAA,YAAA,CAAA,GAAA,EAA2B;AAChC,MAAMK,GAAG,GAAGC,KAAK,CAAjB,MAAYA,EAAZ;AACAD,EAAAA,GAAG,CAAHA,OAAAA,GAAAA,GAAAA;AAEA,SAAO,KAAK,CAAL,WAAA,CAAkB,YAAA;AAAA,WAAMA,GAAG,CAAT,OAAA;AAAlB,GAAA,EAAP,EAAO,CAAP;AACD;;AAEM,SAAA,gBAAA,CAAA,OAAA,EAAA,GAAA,EAAwC;AAC7C,SAAO,OAAA,OAAA,KAAA,UAAA,GAAgCE,OAAO,CAAvC,GAAuC,CAAvC,GAAP,OAAA;AACD;;AAEM,SAAA,uBAAA,CAAA,CAAA,EAAA,KAAA,EAA2C;AAChD,SAAO,QAAQ,CAAR,KAAQ,CAAR,GACHC,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAM,CAAA,EAAA,EAAA,MAAA,CAED,MAAM,CAAN,IAAA,CAAA,KAAA,EAAA,IAAA,GAAA,GAAA,CAEI,UAAA,GAAA,EAAG;AAAA,QAAA,IAAA;;AAAA,WAAA,IAAA,GAAA,EAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GACCC,KAAK,CADN,GACM,CADN,EAAA,IAAA;AALT,GAGE,CAFC,CAAND,CADG,GAAP,KAAA;AAUD;;AAEM,SAAA,eAAA,CAAA,GAAA,EAA8B;AACnC,SAAOE,IAAI,CAAJA,SAAAA,CAAAA,GAAAA,EAAP,uBAAOA,CAAP;AACD;;AAEM,SAAA,QAAA,CAAA,CAAA,EAAqB;AAC1B,SAAOC,CAAC,IAAI,OAAA,CAAA,KAALA,QAAAA,IAA8B,CAACC,KAAK,CAALA,OAAAA,CAAtC,CAAsCA,CAAtC;AACD;;AAEM,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA4B;AACjC,MAAID,CAAC,KAAL,CAAA,EAAa;AACX,WAAA,IAAA;AACD;;AAED,MAAI,OAAA,CAAA,KAAa,OAAjB,CAAA,EAA2B;AACzB,WAAA,KAAA;AACD;;AAED,MAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzB,WAAO,CAAC,MAAM,CAAN,IAAA,CAAA,CAAA,EAAA,IAAA,CAAoB,UAAA,GAAA,EAAG;AAAA,aAAI,CAACE,YAAY,CAACF,CAAC,CAAF,GAAE,CAAF,EAASG,CAAC,CAA3B,GAA2B,CAAV,CAAjB;AAA/B,KAAQ,CAAR;AACD;;AAED,SAAA,KAAA;AACD;;AAEM,SAAA,iBAAA,GAA6B;AAClC,SACE,OAAA,QAAA,KAAA,WAAA,IACAC,QAAQ,CAARA,eAAAA,KADA,SAAA,IAEAA,QAAQ,CAARA,eAAAA,KAFA,SAAA,IAGAA,QAAQ,CAARA,eAAAA,KAJF,WAAA;AAMD;;AAEM,SAAA,QAAA,GAAoB;AACzB,SAAOC,SAAS,CAATA,MAAAA,KAAAA,SAAAA,IAAkCA,SAAS,CAAlD,MAAA;AACD;;AAEM,SAAA,YAAA,CAAA,IAAA,EAA4B;AACjC,MAAIC,QAAQ,CAACC,IAAI,CAAjB,CAAiB,CAAL,CAAZ,EAAuB;AACrB,QACEA,IAAI,CAAJA,CAAI,CAAJA,CAAAA,cAAAA,CAAAA,UAAAA,KACAA,IAAI,CAAJA,CAAI,CAAJA,CAAAA,cAAAA,CAFF,SAEEA,CAFF,EAGE;AAAA,UAAA,MAAA,GAC2CA,IAAI,CAD/C,CAC+C,CAD/C;AAAA,UACQC,SADR,GAAA,MAAA,CAAA,QAAA;AAAA,UACkBC,QADlB,GAAA,MAAA,CAAA,OAAA;AAAA,UAAA,aAAA,GAAA,MAAA,CAAA,MAAA;AAAA,UAC2BC,OAD3B,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,aAAA;;AAEA,aAAA,CAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,MAAA,CAAsCH,IAAI,CAAJA,KAAAA,CAAtC,CAAsCA,CAAtC,CAAA;AALF,KAAA,MAMO;AACL,YAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AACD;AACF;;AAXgC,MAa1BC,QAb0B,GAaiBD,IAbjB,CAAA,CAAA,CAAA;AAAA,MAahBE,OAbgB,GAaiBF,IAbjB,CAAA,CAAA,CAAA;AAAA,MAAA,OAAA,GAaiBA,IAbjB,CAAA,CAAA,CAAA;AAAA,MAaPG,MAbO,GAAA,OAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,OAAA;AAAA,MAaSC,IAbT,GAaiBJ,IAbjB,CAAA,KAaiBA,CAbjB,CAaiBA,CAbjB;AAejC,SAAA,CAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA;AACD;;AAEM,SAAA,kBAAA,CAAA,QAAA,EAAsC;AAC3C,MAAMK,OAAO,GAAGjB,KAAK,CAALA,MAAAA,CAAhB,KAAgBA,CAAhB;AAEAA,EAAAA,KAAK,CAACT,QAAQ,GAAA,WAAA,GAAdS,iBAAK,CAALA,CAAkD,YAAM;AACtDiB,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACA,WAAO,YAAA;AAAA,aAAOA,OAAO,CAAPA,OAAAA,GAAP,KAAA;AAAP,KAAA;AAFFjB,GAAAA,EAAAA,EAAAA;AAKA,SAAO,KAAK,CAAL,WAAA,CACL,YAAA;AAAA,WAAciB,OAAO,CAAPA,OAAAA,GAAkBC,QAAQ,CAARA,KAAAA,CAAAA,KAAAA,CAAAA,EAAlBD,SAAkBC,CAAlBD,GAAsC,KAApD,CAAA;AADK,GAAA,EAEL,CAFF,QAEE,CAFK,CAAP;AAID;;AAEM,SAAA,cAAA,CAAA,SAAA,EAAmC;AACxC,MACEE,SAAS,CAATA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,IACAA,SAAS,CAATA,KAAAA,CAAAA,MAAAA,CAFF,gBAAA,EAGE;AACA,QACEA,SAAS,CAATA,KAAAA,CAAAA,KAAAA,CAAAA,MAAAA,KAAAA,WAAAA,IACAA,SAAS,CAATA,KAAAA,CAAAA,KAAAA,CAFF,oBAAA,EAGE;AACA,YAAMA,SAAS,CAAf,KAAA;AACD;;AAED,QAAIA,SAAS,CAATA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,IAAmCA,SAAS,CAATA,MAAAA,KAAvC,aAAA,EAA2E;AACzEA,MAAAA,SAAS,CAATA,KAAAA,CAAAA,YAAAA,GAAAA,IAAAA;AACA,YAAMA,SAAS,CAATA,KAAAA,CAAN,KAAMA,EAAN;AACD;AACF;AACF,C,CAAA;AAGD;;;AACO,SAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAyB;AAC9B,MAAId,CAAC,KAAL,CAAA,EAAa,OAAA,IAAA;;AAEb,MAAIA,CAAC,IAADA,CAAAA,IAAU,OAAA,CAAA,IAAVA,QAAAA,IAAkC,OAAA,CAAA,IAAtC,QAAA,EAA4D;AAC1D,QAAA,MAAA,EAAA,CAAA,EAAA,IAAA;;AACA,QAAIC,KAAK,CAALA,OAAAA,CAAJ,CAAIA,CAAJ,EAAsB;AACpBc,MAAAA,MAAM,GAAGf,CAAC,CADU,MACpBe,CADoB,CAAA;;AAGpB,UAAIA,MAAM,IAAIZ,CAAC,CAAf,MAAA,EAAwB,OAAA,KAAA;;AACxB,WAAKa,CAAC,GAAN,MAAA,EAAiBA,CAAC,OAAlB,CAAA,GAAA;AAA8B,YAAI,CAACC,SAAS,CAACjB,CAAC,CAAF,CAAE,CAAF,EAAOG,CAAC,CAAtB,CAAsB,CAAR,CAAd,EAA4B,OAAA,KAAA;AAA1D;;AACA,aAAA,IAAA;AACD;;AAED,QAAIH,CAAC,CAADA,OAAAA,KAAcH,MAAM,CAANA,SAAAA,CAAlB,OAAA,EACE,OAAOG,CAAC,CAADA,OAAAA,OAAgBG,CAAC,CAAxB,OAAuBA,EAAvB;AAEFe,IAAAA,IAAI,GAAGrB,MAAM,CAANA,IAAAA,CAAPqB,CAAOrB,CAAPqB;AACAH,IAAAA,MAAM,GAAGG,IAAI,CAAbH,MAAAA;AACA,QAAIA,MAAM,KAAKlB,MAAM,CAANA,IAAAA,CAAAA,CAAAA,EAAf,MAAA,EAAsC,OAAA,KAAA;;AAEtC,SAAKmB,CAAC,GAAN,MAAA,EAAiBA,CAAC,OAAlB,CAAA,GAAA;AACE,UAAI,CAACnB,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAwCqB,IAAI,CAAjD,CAAiD,CAA5CrB,CAAL,EAAuD,OAAA,KAAA;AADzD;;AAGA,SAAKmB,CAAC,GAAN,MAAA,EAAiBA,CAAC,OAAlB,CAAA,GAA8B;AAC5B,UAAIG,GAAG,GAAGD,IAAI,CAAd,CAAc,CAAd;AAEA,UAAI,CAACD,SAAS,CAACjB,CAAC,CAAF,GAAE,CAAF,EAASG,CAAC,CAAxB,GAAwB,CAAV,CAAd,EAAgC,OAAA,KAAA;AACjC;;AAED,WAAA,IAAA;AA7B4B,GAAA,CAAA;AAiC9B;;;AACA,SAAOH,CAAC,KAADA,CAAAA,IAAWG,CAAC,KAAnB,CAAA;AACD;;AClLM,IAAMiB,aAAa,GAAGzB,KAAK,CAA3B,aAAsBA,EAAtB;AAEP,IAAM0B,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EADF,KAAA;AAENC,IAAAA,oBAAoB,EAAEC;AAFhB,GADO;AAKfC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EADA,IAAA;AAEPC,IAAAA,KAAK,EAFE,CAAA;AAGPC,IAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,YAAA,EAAY;AAAA,aAAIC,IAAI,CAAJA,GAAAA,CAAS,OAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAATA,YAAS,CAATA,EAAJ,KAAIA,CAAJ;AAHjB,KAAA;AAIPC,IAAAA,SAAS,EAJF,CAAA;AAKPC,IAAAA,SAAS,EAAE,IAAA,EAAA,GALJ,IAAA;AAMPC,IAAAA,oBAAoB,EANb,IAAA;AAOPC,IAAAA,eAAe,EAPR,KAAA;AAQPC,IAAAA,mBAAmB,EARZ,QAAA;AASPC,IAAAA,cAAc,EATP,IAAA;AAUPC,IAAAA,WAAW,EAVJ,SAAA;AAWPC,IAAAA,OAAO,EAXA,IAAA;AAYPC,IAAAA,SAAS,EAZF,IAAA;AAaPC,IAAAA,SAAS,EAbF,IAAA;AAcPC,IAAAA,gBAAgB,EAAE;AAdX,GALM;AAqBfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,EADH,KAAA;AAETC,IAAAA,QAAQ,EAFC,IAAA;AAGTN,IAAAA,OAAO,EAHE,IAAA;AAITC,IAAAA,SAAS,EAJA,IAAA;AAKTC,IAAAA,SAAS,EALA,IAAA;AAMTC,IAAAA,gBAAgB,EAAE;AANT;AArBI,CAAjB;AA+BO,IAAMI,gBAAgB,GAAG;AAC9BC,EAAAA,OAAO,EAAEzB;AADqB,CAAzB;;AAIA,SAAA,gBAAA,GAA4B;AACjC,SAAO1B,KAAK,CAALA,UAAAA,CAAAA,aAAAA,KAAmCkD,gBAAgB,CAA1D,OAAA;AACD;;AAEM,SAAA,wBAAA,CAAA,IAAA,EAAwD;AAAA,MAApBnC,MAAoB,GAAA,IAAA,CAApBA,MAAoB;AAAA,MAAZqC,QAAY,GAAA,IAAA,CAAZA,QAAY;AAC7D,MAAIC,kBAAkB,GAAGC,gBAAzB,EAAA;AAEA,MAAMC,SAAS,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;AAAA,QAAA,cAAA,GACkBxC,MADlB,CAAA,MAAA;AAAA,QAC5BY,MAD4B,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAAA,QAAA,eAAA,GACkBZ,MADlB,CAAA,OAAA;AAAA,QACfgB,OADe,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,eAAA;AAAA,QAAA,iBAAA,GACkBhB,MADlB,CAAA,SAAA;AAAA,QACDgC,SADC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,iBAAA;AAAA,QAAA,qBAAA,GAMhCM,kBANgC,CAAA,MAAA;AAAA,QAG1BG,aAH0B,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,QAAA,qBAAA,GAMhCH,kBANgC,CAAA,OAAA;AAAA,QAIzBI,cAJyB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,QAAA,qBAAA,GAMhCJ,kBANgC,CAAA,SAAA;AAAA,QAKvBK,gBALuB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAOpC,WAAO;AACL/B,MAAAA,MAAM,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EADD,MACC,CADD;AAKLI,MAAAA,OAAO,EAAA,QAAA,CAAA,EAAA,EAAA,cAAA,EALF,OAKE,CALF;AASLgB,MAAAA,SAAS,EAAA,QAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,SAAA;AATJ,KAAP;AAPgB,GAAA,EAqBf,CAAA,MAAA,EArBH,kBAqBG,CArBe,CAAlB;AAuBA/C,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB;AACA,WAAO,YAAM;AACXkD,MAAAA,gBAAgB,CAAhBA,OAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAiCG,kBAAkB,IAAnDH,QAAAA,CAAAA;AADF,KAAA;AAFFlD,GAAAA,EAKG,CALHA,kBAKG,CALHA;;AAOA,MAAI,CAAJ,kBAAA,EAAyB;AACvBkD,IAAAA,gBAAgB,CAAhBA,OAAAA,GAAAA,SAAAA;AACD;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,EAAA;AAAwB,IAAA,KAAK,EAAEK;AAA/B,GAAA,EADF,QACE,CADF;AAKD;;AAED,SAAA,eAAA,GAA2B;AACzB,QAAM,IAAA,KAAA,CAAN,gCAAM,CAAN;AACD;;AAEM,SAAA,2BAAA,CAAA,QAAA,EAA+C;AACpD,MAAI,CAAJ,QAAA,EAAe;AACbI,IAAAA,eAAe;AAChB;;AAED,MAAI,CAACrD,KAAK,CAALA,OAAAA,CAAL,QAAKA,CAAL,EAA8B;AAC5BO,IAAAA,QAAQ,GAAG,CAAXA,QAAW,CAAXA;AACD;;AAED,MAAI,QAAQ,CAAR,IAAA,CAAc,UAAA,CAAA,EAAC;AAAA,WAAI,OAAA,CAAA,KAAJ,UAAA;AAAnB,GAAI,CAAJ,EAAiD;AAC/C8C,IAAAA,eAAe;AAChB;;AAED,MAAMC,SAAS,GAAGC,eAAe,CAAjC,QAAiC,CAAjC;AACAhD,EAAAA,QAAQ,GAAGT,IAAI,CAAJA,KAAAA,CAAXS,SAAWT,CAAXS;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AACd8C,IAAAA,eAAe;AAChB;;AAED,SAAO,CAAA,SAAA,EAAP,QAAO,CAAP;AACD;;AC7BM,SAAA,MAAA,CAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAqC;AAC3C,MAAA,MAAA,EAAY;AACX,WAAO6B,IAAIC,GAAGD,IAAI,CAAPC,KAAO,CAAPA,GAAX,KAAA;AACA;;AACD,MAAI,CAAA,KAAA,IAAU,CAACtF,KAAK,CAApB,IAAA,EAA2B;AAC1BA,IAAAA,KAAK,GAAG+E,OAAO,CAAPA,OAAAA,CAAR/E,KAAQ+E,CAAR/E;AACA;;AACD,SAAOqF,IAAI,GAAGrF,KAAK,CAALA,IAAAA,CAAH,IAAGA,CAAH,GAAX,KAAA;AACA;;AAsdM,SAAA,MAAA,CAAA,IAAA,EAAA,OAAA,EAA+B;AACrC,MAAI;AACH,QAAIwH,MAAM,GAAGC,IAAb,EAAA;AADD,GAAA,CAEE,OAAA,CAAA,EAAS;AACV,WAAOC,OAAO,CAAd,CAAc,CAAd;AACA;;AACD,MAAIF,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAY,KAAZA,CAAAA,EAAP,OAAOA,CAAP;AACA;;AACD,SAAA,MAAA;AACA;;AAtfM,SAAA,MAAA,CAAA,CAAA,EAAmB;AACzB,SAAO,YAAW;AACjB,SAAK,IAAI/G,IAAI,GAAR,EAAA,EAAeS,CAAC,GAArB,CAAA,EAA2BA,CAAC,GAAG2D,SAAS,CAAxC,MAAA,EAAiD3D,CAAjD,EAAA,EAAsD;AACrDT,MAAAA,IAAI,CAAJA,CAAI,CAAJA,GAAU,SAAS,CAAnBA,CAAmB,CAAnBA;AACA;;AACD,QAAI;AACH,aAAOsE,OAAO,CAAPA,OAAAA,CAAgBC,CAAC,CAADA,KAAAA,CAAAA,IAAAA,EAAvB,IAAuBA,CAAhBD,CAAP;AADD,KAAA,CAEE,OAAA,CAAA,EAAS;AACV,aAAOA,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;AACA;AARF,GAAA;AAUA;;AA+gBM,SAAA,MAAA,GAAkB,CAAA;;AAjgBlB,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAsC;AAC5C,MAAI,CAAJ,MAAA,EAAa;AACZ,WAAO/E,KAAK,IAAIA,KAAK,CAAdA,IAAAA,GAAsBA,KAAK,CAALA,IAAAA,CAAtBA,MAAsBA,CAAtBA,GAA2C+E,OAAO,CAAzD,OAAkDA,EAAlD;AACA;AACD;;AA8bM,SAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAA6B;AACnC,MAAIyC,MAAM,GAAGC,IAAb,EAAA;;AACA,MAAID,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAP,IAAOA,CAAP;AACA;;AACD,SAAOnC,IAAIkC,CAAX,MAAWA,CAAX;AACA;;AA5bM,SAAA,gBAAA,CAAA,KAAA,EAAiC;AACvC,MAAIvH,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACxB,WAAOA,KAAK,CAALA,IAAAA,CAAP,MAAOA,CAAP;AACA;AACD;;IA7FY2D,UAAU,GAAGC,cAAc,E;AAEjC,IAAMC,iBAAiB,GAAGhE,KAAK,CAALA,aAAAA,CAA1B,UAA0BA,CAA1B;IAEMiE,WAAW,GAAG,CAAA,UAAA,C;;IAEdC,aAAa,GAAG,SAAhBA,aAAgB,GAAA;AAAA,SAAMlE,KAAK,CAALA,UAAAA,CAAN,iBAAMA,CAAN;AAAA,C;;AAEtB,SAAA,uBAAA,CAAA,IAAA,EAA2D;AAAA,MAAxB8D,UAAwB,GAAA,IAAA,CAAxBA,UAAwB;AAAA,MAAZV,QAAY,GAAA,IAAA,CAAZA,QAAY;AAChE,MAAMe,kBAAkB,GAAG,KAAK,CAAL,OAAA,CACzB,YAAA;AAAA,WAAML,UAAU,IAAIC,cAApB,EAAA;AADyB,GAAA,EAEzB,CAFF,UAEE,CAFyB,CAA3B;AAKA/D,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBiE,IAAAA,WAAW,CAAXA,IAAAA,CAAAA,kBAAAA;AAEA,WAAO,YAAM;AACX;AACA,UAAM5C,CAAC,GAAG4C,WAAW,CAAXA,OAAAA,CAAV,kBAAUA,CAAV;;AACA,UAAI5C,CAAC,GAAG,CAAR,CAAA,EAAY;AACV4C,QAAAA,WAAW,CAAXA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAJS,OAAA,CAAA;;;AAOX,UAAIH,UAAU,IAAd,IAAA,EAAwB;AACtBK,QAAAA,kBAAkB,CAAlBA,KAAAA;AACD;AATH,KAAA;AAHFnE,GAAAA,EAcG,CAAA,kBAAA,EAdHA,UAcG,CAdHA;AAgBA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;AAA4B,IAAA,KAAK,EAAEmE;AAAnC,GAAA,EADF,QACE,CADF;AAKD;;AAED,IAAMC,UAAU,GAAhB,MAAA;AACA,IAAMC,YAAY,GAAlB,QAAA;AACA,IAAMC,eAAe,GAArB,WAAA;AACA,IAAMC,YAAY,GAAlB,QAAA;AACA,IAAMC,WAAW,GAAjB,OAAA;AACA,IAAMC,aAAa,GAAnB,SAAA;AACA,IAAMC,WAAW,GAAjB,OAAA;AACA,IAAMC,cAAc,GAApB,UAAA;;AAEO,SAAA,cAAA,CAAA,KAAA,EAAmE;AAAA,MAAA,KAAA,GAAA,KAAA,KAAA,KAAA,CAAA,GAAJ,EAAI,GAAA,KAAA;AAAA,MAAA,YAAA,GAAA,KAAA,CAAzCC,MAAyC;AAAA,MAAzCA,MAAyC,GAAA,YAAA,KAAA,KAAA,CAAA,GAAhCrF,QAAgC,GAAA,YAAA;AAAA,MAAtBsF,aAAsB,GAAA,KAAA,CAAtBA,aAAsB,CAAA,CACxE;;;AACA,MAAMC,eAAe,GAArB,EAAA;AAEA,MAAMC,SAAS,GAAGF,aAAa,GAC3B;AAAE1B,IAAAA,OAAO,EAAE0B;AAAX,GAD2B,GAA/B,gBAAA;AAIA,MAAMf,UAAU,GAAG;AACjB/B,IAAAA,OAAO,EADU,EAAA;AAEjBkD,IAAAA,UAAU,EAAE;AAFK,GAAnB;;AAKA,MAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClCtB,IAAAA,UAAU,CAAVA,UAAAA,GAAwB,MAAM,CAAN,MAAA,CAAcA,UAAU,CAAxB,OAAA,EAAA,MAAA,CACtB,UAAA,GAAA,EAAA,KAAA,EAAA;AAAA,aAAiBuB,KAAK,CAALA,KAAAA,CAAAA,UAAAA,GAAyBC,GAAG,GAA5BD,CAAAA,GAAjB,GAAA;AADsB,KAAA,EAAxBvB,CAAwB,CAAxBA;AAKAgB,IAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,CAAA,EAAC;AAAA,aAAIS,CAAC,CAAL,UAAK,CAAL;AAAzBT,KAAAA;AANF,GAAA;;AASA,EAAA,UAAU,CAAV,SAAA,GAAuB,UAAA,EAAA,EAAM;AAC3BA,IAAAA,eAAe,CAAfA,IAAAA,CAAAA,EAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,eAAe,CAAfA,MAAAA,CAAuBA,eAAe,CAAfA,OAAAA,CAAvBA,EAAuBA,CAAvBA,EAAAA,CAAAA;AADF,KAAA;AAFF,GAAA;;AAOAhB,EAAAA,UAAU,CAAVA,KAAAA,GAAmB,UAAA,MAAA,EAA4B;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,KAAA,CAAA,GAAP,EAAO,GAAA,MAAA;AAAA,QAAA,YAAA,GAAA,KAAA,CAAzB4B,MAAyB;AAAA,QAAzBA,MAAyB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAhB,IAAgB,GAAA,YAAA;;AAC7CxF,IAAAA,MAAM,CAANA,MAAAA,CAAc4D,UAAU,CAAxB5D,OAAAA,EAAAA,OAAAA,CAA0C,UAAA,KAAA,EAAK;AAAA,aAAImF,KAAK,CAAT,KAAIA,EAAJ;AAA/CnF,KAAAA;AACA4D,IAAAA,UAAU,CAAVA,OAAAA,GAAAA,EAAAA;;AACA,QAAA,MAAA,EAAY;AACVsB,MAAAA,qBAAqB;AACtB;AALHtB,GAAAA;;AAQAA,EAAAA,UAAU,CAAVA,UAAAA,GAAwB,UAAA,SAAA,EAAA,MAAA,EAA+B;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,KAAA,CAAA,GAAP,EAAO,GAAA,MAAA;AAAA,QAAjB6B,KAAiB,GAAA,KAAA,CAAjBA,KAAiB;;AACrD,QAAIC,SAAS,KAAb,IAAA,EAAwB;AACtB,aAAO1F,MAAM,CAANA,MAAAA,CAAc4D,UAAU,CAA/B,OAAO5D,CAAP;AACD;;AAED,QAAI,OAAA,SAAA,KAAJ,UAAA,EAAqC;AAAA,UAAA,qBAAA,GAI/B6E,SAAS,CAATA,OAAAA,CAAAA,MAAAA,CAAAA,oBAAAA,CAJ+B,SAI/BA,CAJ+B;AAAA,UAEjCnB,SAFiC,GAAA,qBAAA,CAAA,CAAA,CAAA;AAAA,UAGjC/C,QAHiC,GAAA,qBAAA,CAAA,CAAA,CAAA;;AAMnC+E,MAAAA,SAAS,GAAG,SAAA,SAAA,CAAA,CAAA,EAAC;AAAA,eACXD,KAAK,GAAGJ,CAAC,CAADA,SAAAA,KAAH,SAAA,GAA+BhF,YAAY,CAACgF,CAAC,CAAF,QAAA,EADrC,QACqC,CADrC;AAAbK,OAAAA;AAED;;AAED,WAAO1F,MAAM,CAANA,MAAAA,CAAc4D,UAAU,CAAxB5D,OAAAA,EAAAA,MAAAA,CAAP,SAAOA,CAAP;AAfF4D,GAAAA;;AAkBAA,EAAAA,UAAU,CAAVA,QAAAA,GAAsB,UAAA,QAAA,EAAQ;AAAA,WAC5B,UAAU,CAAV,UAAA,CAAA,QAAA,EAAgC;AAAE6B,MAAAA,KAAK,EAAE;AAAT,KAAhC,EAD4B,CAC5B,CAD4B;AAA9B7B,GAAAA;;AAGAA,EAAAA,UAAU,CAAVA,YAAAA,GAA0B,UAAA,QAAA,EAAQ;AAAA,QAAA,oBAAA;;AAAA,WAAA,CAAA,oBAAA,GAChCA,UAAU,CAAVA,QAAAA,CADgC,QAChCA,CADgC,KAAA,IAAA,GAAA,KAAA,CAAA,GAChCA,oBAAAA,CAAAA,KAAAA,CADgC,IAAA;AAAlCA,GAAAA;;AAGAA,EAAAA,UAAU,CAAVA,aAAAA,GAA2B,YAAa;AACtCA,IAAAA,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAAAA,OAAAA,CAAuC,UAAA,KAAA,EAAK;AAAA,aAAIuB,KAAK,CAAT,KAAIA,EAAJ;AAA5CvB,KAAAA;AADFA,GAAAA;;AAIAA,EAAAA,UAAU,CAAVA,aAAAA,GAA2B,YAAa;AACtCA,IAAAA,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAAAA,OAAAA,CAAuC,UAAA,KAAA,EAAK;AAAA,aAAIuB,KAAK,CAAT,MAAIA,EAAJ;AAA5CvB,KAAAA;AADFA,GAAAA;;AAIAA,EAAAA,UAAU,CAAVA,iBAAAA,GAAAA,MAAAA,CAAAA,UAAAA,SAAAA,EAAAA,MAAAA,EAGK;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,KAAA,CAAA,GAD6C,EAC7C,GAAA,MAAA;AAAA,QAAA,mBAAA,GAAA,KAAA,CADD+B,aACC;AAAA,QADDA,aACC,GAAA,mBAAA,KAAA,KAAA,CAAA,GADe,IACf,GAAA,mBAAA;AAAA,QADqBF,KACrB,GAAA,KAAA,CADqBA,KACrB;AAAA,QAD4B3C,YAC5B,GAAA,KAAA,CAD4BA,YAC5B;;AAAA,WAAA,MAAA,CAAA,YACC;AAAA,aAAA,MAAA,CACW,OAAO,CAAP,GAAA,CACX,UAAU,CAAV,UAAA,CAAA,SAAA,EAAiC;AAAE2C,QAAAA,KAAK,EAALA;AAAF,OAAjC,EAAA,GAAA,CAAgD,UAAA,KAAA,EAAS;AACvD,YAAIE,aAAa,IAAIR,KAAK,CAALA,SAAAA,CAArB,MAAA,EAA6C;AAC3C,iBAAOA,KAAK,CAAZ,KAAOA,EAAP;AACD;;AAED,eAAOA,KAAK,CAAZ,UAAOA,EAAP;AAPF,OAEA,CADW,CADX,CAAA;AADD,KAAA,EAAA,UAAA,GAAA,EAWW;AAAA,UAAA,YAAA,EAAA;AAEV,cAAA,GAAA;AAFU;AAXX,KAAA,CAAA;AAHLvB,GAAAA,CAAAA;;AAqBAA,EAAAA,UAAU,CAAVA,oBAAAA,GAAkC,YAAM;AACtCA,IAAAA,UAAU,CAAVA,UAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAoC,UAAA,KAAA,EAAS;AAC3CuB,MAAAA,KAAK,CAALA,KAAAA,CAAAA,oBAAAA,GAAAA,KAAAA;AADFvB,KAAAA;AADFA,GAAAA;;AAMAA,EAAAA,UAAU,CAAVA,UAAAA,GAAwB,UAAA,YAAA,EAAA,OAAA,EAAA,MAAA,EAAwC;AAAA,QAAhB/C,MAAgB,KAAA,KAAA,CAAA,EAAA;AAAhBA,MAAAA,MAAgB,GAAP,EAATA;AAAgB;;AAC9DA,IAAAA,MAAM,GAAA,QAAA,CAAA,EAAA,EACDgE,SAAS,CAATA,OAAAA,CADC,MAAA,EAEDA,SAAS,CAATA,OAAAA,CAFC,OAAA,EAANhE,MAAM,CAANA;;AAD8D,QAAA,qBAAA,GAOlCA,MAAM,CAANA,oBAAAA,CAPkC,YAOlCA,CAPkC;AAAA,QAOzD6C,SAPyD,GAAA,qBAAA,CAAA,CAAA,CAAA;AAAA,QAO9C/C,QAP8C,GAAA,qBAAA,CAAA,CAAA,CAAA;;AAS9D,QAAIwE,KAAK,GAAGvB,UAAU,CAAVA,OAAAA,CAAZ,SAAYA,CAAZ;;AAEA,QAAA,KAAA,EAAW;AACT5D,MAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqB;AAAEY,QAAAA,OAAO,EAAT,OAAA;AAAWC,QAAAA,MAAM,EAANA;AAAX,OAArBb;AADF,KAAA,MAEO;AACLmF,MAAAA,KAAK,GAAGS,SAAS,CAAC;AAChBhC,QAAAA,UAAU,EADM,UAAA;AAEhBjD,QAAAA,QAAQ,EAFQ,QAAA;AAGhB+C,QAAAA,SAAS,EAHO,SAAA;AAIhB9C,QAAAA,OAAO,EAJS,OAAA;AAKhBC,QAAAA,MAAM,EAANA;AALgB,OAAD,CAAjBsE,CADK,CAAA;AAUL;;AACA,UAAI,CAAA,QAAA,IAAaA,KAAK,CAALA,KAAAA,CAAjB,IAAA,EAAmC;AACjCA,QAAAA,KAAK,CAD4B,oBACjCA,GADiC,CAAA;;AAIjCA,QAAAA,KAAK,CAJ4B,IAIjCA,GAJiC,CAAA;AAMjC;;AACAA,QAAAA,KAAK,CAALA,yBAAAA;AACD;;AAED,UAAI,CAAJ,MAAA,EAAa;AACXvB,QAAAA,UAAU,CAAVA,OAAAA,CAAAA,SAAAA,IAAAA,KAAAA;;AAEA,YAAA,QAAA,EAAc;AACZsB,UAAAA,qBAAqB;AADvB,SAAA,MAEO;AACL;AACA;AACA;AACAW,UAAAA,UAAU,CAAC,YAAM;AACfX,YAAAA,qBAAqB;AADvBW,WAAU,CAAVA;AAGD;AACF;AACF;;AAEDV,IAAAA,KAAK,CAALA,gBAAAA,GAAyB;AACvBtE,MAAAA,MAAM,EAAE;AACN6B,QAAAA,SAAS,EAAEyC,KAAK,CAALA,MAAAA,CADL,SAAA;AAEN1C,QAAAA,OAAO,EAAE0C,KAAK,CAALA,MAAAA,CAFH,OAAA;AAGNxC,QAAAA,SAAS,EAAEwC,KAAK,CAALA,MAAAA,CAAaxC;AAHlB;AADe,KAAzBwC;AAQA,WAAA,KAAA;AA1DFvB,GAAAA;;AA6DAA,EAAAA,UAAU,CAAVA,aAAAA,GAAAA,MAAAA,CAAAA,YAA8C;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATlD,IAAS,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,MAAAA,IAAS,CAAA,IAAA,CAATA,GAAS,SAAA,CAAA,IAAA,CAATA;AAAS;;AAAA,QAAA,aAAA,GAMxCqF,YAAY,CAN4B,IAM5B,CAN4B;AAAA,QAE1CpF,QAF0C,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,QAG1CC,OAH0C,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,QAI1CC,MAJ0C,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,QAAA,cAAA,GAAA,aAAA,CAAA,CAAA,CAAA;;AAAA,IAAA,cAAA,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAAA,QAKxCiF,KALwC,GAAA,cAAA,CAAA,KAAA;AAAA,QAKjChD,YALiC,GAAA,cAAA,CAAA,YAAA;AAAA,WAAA,MAAA,CAAA,YAQxC;AACF,UAAMqC,KAAK,GAAGvB,UAAU,CAAVA,UAAAA,CAAAA,QAAAA,EAAAA,OAAAA,EAAd,MAAcA,CAAd;AADE,aAAA,OAAA,CAAA,YAAA;AAAA,YAEEkC,KAAK,IAAIX,KAAK,CAALA,KAAAA,CAFX,OAAA,EAAA;AAAA,iBAAA,aAAA,CAGMA,KAAK,CAHX,KAGMA,EAHN,CAAA;AAAA;AAAA,OAAA,EAAA,YAAA;AAKF,eAAOA,KAAK,CAALA,KAAAA,CAAP,IAAA;AALE,OAAA,CAAA;AARwC,KAAA,EAAA,UAAA,GAAA,EAc9B;AAAA,UAAA,YAAA,EAAA;AAEV,cAAA,GAAA;AAFU;AAd8B,KAAA,CAAA;AAA9CvB,GAAAA,CAAAA;;AAqBAA,EAAAA,UAAU,CAAVA,YAAAA,GAA0B,UAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAoC;AAAA,QAAhB/C,MAAgB,KAAA,KAAA,CAAA,EAAA;AAAhBA,MAAAA,MAAgB,GAAP,EAATA;AAAgB;;AAC5D,QAAIsE,KAAK,GAAGvB,UAAU,CAAVA,QAAAA,CAAZ,QAAYA,CAAZ;;AAEA,QAAI,CAAJ,KAAA,EAAY;AACVuB,MAAAA,KAAK,GAAG,UAAU,CAAV,UAAA,CAAA,QAAA,EAAgC,YAAA;AAAA,eAAM,IAAA,OAAA,CAAN,IAAM,CAAN;AAAhC,OAAA,EAARA,MAAQ,CAARA;AACD;;AAEDA,IAAAA,KAAK,CAALA,OAAAA,CAAAA,OAAAA;AAPFvB,GAAAA;;AAUA,WAAA,SAAA,CAAA,KAAA,EAAyE;AAAA,QAApDA,UAAoD,GAAA,KAAA,CAApDA,UAAoD;AAAA,QAAxCjD,QAAwC,GAAA,KAAA,CAAxCA,QAAwC;AAAA,QAA9B+C,SAA8B,GAAA,KAAA,CAA9BA,SAA8B;AAAA,QAAnB9C,OAAmB,GAAA,KAAA,CAAnBA,OAAmB;AAAA,QAAVC,MAAU,GAAA,KAAA,CAAVA,MAAU;AACvE,QAAMmF,WAAW,GACf,OAAOnF,MAAM,CAAb,WAAA,KAAA,UAAA,GACIA,MAAM,CADV,WACIA,EADJ,GAEIA,MAAM,CAHZ,WAAA;AAKA,QAAMoF,cAAc,GAAG,OAAA,WAAA,KAAvB,WAAA;AAEA,QAAMC,OAAO,GAAG,CAACrF,MAAM,CAAP,OAAA,IAAmB,CAAnC,cAAA;AAEA,QAAMsF,aAAa,GAAGF,cAAc,GAAA,aAAA,GAEhCpF,MAAM,CAANA,OAAAA,GAAAA,aAAAA,GAFJ,UAAA;AAMA,QAAIsE,KAAK,GAAG;AACVxE,MAAAA,QAAQ,EADE,QAAA;AAEV+C,MAAAA,SAAS,EAFC,SAAA;AAGV9C,MAAAA,OAAO,EAHG,OAAA;AAIVC,MAAAA,MAAM,EAJI,MAAA;AAKVuF,MAAAA,SAAS,EALC,EAAA;AAMVC,MAAAA,KAAK,EAAEC,YAAY,CAAA,SAAA,EAAY;AAC7BC,QAAAA,IAAI,EADyB,UAAA;AAE7BJ,QAAAA,aAAa,EAFgB,aAAA;AAG7BH,QAAAA,WAAW,EAHkB,WAAA;AAI7BC,QAAAA,cAAc,EAJe,cAAA;AAK7BC,QAAAA,OAAO,EAAPA;AAL6B,OAAZ;AANT,KAAZ;;AAeAf,IAAAA,KAAK,CAALA,QAAAA,GAAiB,UAAA,MAAA,EAAU;AACzBA,MAAAA,KAAK,CAALA,KAAAA,GAAcmB,YAAY,CAACnB,KAAK,CAAN,KAAA,EAA1BA,MAA0B,CAA1BA;AACAA,MAAAA,KAAK,CAALA,SAAAA,CAAAA,OAAAA,CAAwB,UAAA,CAAA,EAAC;AAAA,eAAIE,CAAC,CAADA,aAAAA,CAAgBF,KAAK,CAAzB,KAAIE,CAAJ;AAAzBF,OAAAA;AACAD,MAAAA,qBAAqB;AAHvBC,KAAAA;;AAMAA,IAAAA,KAAK,CAALA,oBAAAA,GAA6B,YAAM;AACjC,UAAA,QAAA,EAAc;AACdqB,MAAAA,YAAY,CAACrB,KAAK,CAAlBqB,YAAY,CAAZA;;AAEA,UAAIrB,KAAK,CAALA,MAAAA,CAAAA,SAAAA,KAAJ,QAAA,EAAyC;AACvC;AACD;;AAEDA,MAAAA,KAAK,CAALA,YAAAA,GAAqBU,UAAU,CAAC,YAAM;AACpC,YAAIjC,UAAU,CAAVA,QAAAA,CAAoBuB,KAAK,CAA7B,QAAIvB,CAAJ,EAAyC;AACvCuB,UAAAA,KAAK,CAALA,UAAAA;AACD;AAH4B,OAAA,EAI5BA,KAAK,CAALA,MAAAA,CAJHA,SAA+B,CAA/BA;AARFA,KAAAA;;AAeAA,IAAAA,KAAK,CAALA,UAAAA,GAAmB,YAAM;AACvBqB,MAAAA,YAAY,CAACrB,KAAK,CAAlBqB,YAAY,CAAZA;AACArB,MAAAA,KAAK,CAALA,QAAAA,CAAe;AAAEoB,QAAAA,IAAI,EAAEnC;AAAR,OAAfe;AAFFA,KAAAA;;AAKAA,IAAAA,KAAK,CAALA,yBAAAA,GAAkC,YAAM;AACtC,UAAIA,KAAK,CAALA,MAAAA,CAAAA,SAAAA,KAAJ,QAAA,EAAyC;AACvC;AACD;;AACDA,MAAAA,KAAK,CAALA,QAAAA,CAAe;AAAEoB,QAAAA,IAAI,EAAElC;AAAR,OAAfc;AACAA,MAAAA,KAAK,CAALA,YAAAA,GAAqBU,UAAU,CAC7B,YAAM;AACJjC,QAAAA,UAAU,CAAVA,aAAAA,CACE,UAAA,CAAA,EAAC;AAAA,iBACCyB,CAAC,CAADA,KAAAA,CAAAA,0BAAAA,IACAA,CAAC,CAADA,SAAAA,KAAgBF,KAAK,CAFtB,SAAA;AADHvB,SAAAA;AAF2B,OAAA,EAQ7B,OAAOuB,KAAK,CAALA,KAAAA,CAAP,IAAA,KAAA,WAAA,IACEA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,KADF,OAAA,GAAA,CAAA,GAGIA,KAAK,CAALA,MAAAA,CAXNA,SAA+B,CAA/BA;AALFA,KAAAA;;AAoBAA,IAAAA,KAAK,CAALA,IAAAA,GAAa,YAAM;AACjB;AACAqB,MAAAA,YAAY,CAACrB,KAAK,CAFD,YAEL,CAAZqB,CAFiB,CAAA;;AAKjBrB,MAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AALFA,KAAAA;;AAQAA,IAAAA,KAAK,CAALA,MAAAA,GAAe,YAAM;AACnBA,MAAAA,KAAK,CAALA,SAAAA,GAAAA,cAAAA;;AAEA,UAAIA,KAAK,CAAT,cAAA,EAA0B;AACxBA,QAAAA,KAAK,CAALA,cAAAA;AACD;;AAED,aAAOA,KAAK,CAAZ,OAAA;AAPFA,KAAAA;;AAUAA,IAAAA,KAAK,CAALA,cAAAA,GAAuB,YAAM;AAC3BA,MAAAA,KAAK,CAALA,SAAAA,CAAAA,OAAAA,CAAwB,UAAA,QAAA,EAAY;AAClCsB,QAAAA,QAAQ,CAARA,aAAAA;AADFtB,OAAAA;AADFA,KAAAA;;AAMAA,IAAAA,KAAK,CAALA,QAAAA,GAAiB,UAAA,OAAA,EAAO;AAAA,aACtB,KAAK,CAAL,QAAA,CAAe;AAAEoB,QAAAA,IAAI,EAAN,cAAA;AAAwBxG,QAAAA,OAAO,EAAPA;AAAxB,OAAf,CADsB;AAAxBoF,KAAAA;;AAGAA,IAAAA,KAAK,CAALA,OAAAA,GAAgB,UAAA,OAAA,EAAW;AACzB;AACAA,MAAAA,KAAK,CAALA,QAAAA,CAAe;AAAEoB,QAAAA,IAAI,EAAN,aAAA;AAAuBxG,QAAAA,OAAO,EAAPA;AAAvB,OAAfoF,EAFyB,CAAA;;AAKzBA,MAAAA,KAAK,CAALA,oBAAAA;AALFA,KAAAA;;AAQAA,IAAAA,KAAK,CAALA,KAAAA,GAAc,YAAM;AAClBqB,MAAAA,YAAY,CAACrB,KAAK,CAAlBqB,YAAY,CAAZA;AACAA,MAAAA,YAAY,CAACrB,KAAK,CAAlBqB,YAAY,CAAZA;AACAA,MAAAA,YAAY,CAACrB,KAAK,CAAlBqB,YAAY,CAAZA;AACArB,MAAAA,KAAK,CAALA,cAAAA;AACAA,MAAAA,KAAK,CAALA,MAAAA;AACAA,MAAAA,KAAK,CAALA,QAAAA,GAAAA,IAAAA;AACA,aAAOvB,UAAU,CAAVA,OAAAA,CAAmBuB,KAAK,CAA/B,SAAOvB,CAAP;AAPFuB,KAAAA;;AAUAA,IAAAA,KAAK,CAALA,SAAAA,GAAkB,UAAA,aAAA,EAA0B;AAAA,UAAzBuB,aAAyB,KAAA,KAAA,CAAA,EAAA;AAAzBA,QAAAA,aAAyB,GAATpH,IAAhBoH;AAAyB;;AAC1C,UAAMD,QAAQ,GAAG;AACfE,QAAAA,EAAE,EAAExH,GADW,EAAA;AAEfuH,QAAAA,aAAa,EAAbA;AAFe,OAAjB;AAKAvB,MAAAA,KAAK,CAALA,SAAAA,CAAAA,IAAAA,CAAAA,QAAAA;AAEAA,MAAAA,KAAK,CAALA,IAAAA;;AAEAsB,MAAAA,QAAQ,CAARA,aAAAA,GAAyB,YAAM;AAC7BG,QAAAA,aAAa,CAACH,QAAQ,CAAtBG,iBAAa,CAAbA;AACA,eAAOH,QAAQ,CAAf,iBAAA;AAFFA,OAAAA;;AAKAA,MAAAA,QAAQ,CAARA,YAAAA,GAAwB,UAAA,MAAA,EAAU;AAChC,YAAMI,SAAS,GAAGJ,QAAQ,CADM,MAChC,CADgC,CAAA;;AAIhCA,QAAAA,QAAQ,CAARA,MAAAA,GAAAA,MAAAA;;AAEA,YAAI,CAAJ,QAAA,EAAe;AACb,cAAI,CAAA,SAAS,IAAT,IAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAT,eAAA,MAA+B5F,MAAM,CAAzC,eAAA,EAA2D;AACzD;AACD;;AAEDsE,UAAAA,KAAK,CAALA,cAAAA;AAEA,cAAM2B,WAAW,GAAG7E,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EACf,KAAK,CAAL,SAAA,CAAA,GAAA,CAAoB,UAAA,CAAA,EAAC;AAAA,mBAAIoD,CAAC,CAADA,MAAAA,CAAAA,eAAAA,IAAJ,QAAA;AAD1B,WACK,CADepD,CAApB;;AAIA,cACE,CAACwE,QAAQ,CAAT,iBAAA,IACAK,WAAW,GADX,CAAA,IAEAA,WAAW,GAHb,QAAA,EAIE;AACAL,YAAAA,QAAQ,CAARA,iBAAAA,GAA6BM,WAAW,CAAC,YAAM;AAC7C,kBACEC,iBAAiB,MACjB,KAAK,CAAL,SAAA,CAAA,IAAA,CACE,UAAA,QAAA,EAAQ;AAAA,uBAAIP,QAAQ,CAARA,MAAAA,CAAJ,2BAAA;AAHZ,eAEE,CAFF,EAKE;AACAtB,gBAAAA,KAAK,CAALA,KAAAA;AACD;AARqC,aAAA,EAAxCsB,WAAwC,CAAxCA;AAUD;AACF;AAjCHA,OAAAA;;AAoCAA,MAAAA,QAAQ,CAARA,GAAAA,GAAAA,MAAAA,CAAAA,YAA2B;AAAA,eAAA,gBAAA,CAAA,MAAA,CAAA,YACrB;AACF;AADE,iBAAA,OAAA,CAAA,YAAA;AAAA,gBAGAtB,KAAK,CAALA,MAAAA,CAAAA,OAAAA,IAAAA;AACA,aAACA,KAAK,CADNA,YAAAA,IAAAA;AAEAA,YAAAA,KAAK,CAALA,KAAAA,CAFAA,OAAAA,MAAAA;AAGCA,YAAAA,KAAK,CAALA,MAAAA,CAAAA,cAAAA,IAA+BA,KAAK,CAALA,SAAAA,CAAAA,MAAAA,KANhC,CAGAA,CAHA,EAAA;AAAA,qBAAA,aAAA,CAQMA,KAAK,CARX,KAQMA,EARN,CAAA;AAAA;AAAA,WAAA,EAAA,YAAA;AAWFA,YAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AAXE,WAAA,CAAA;AADqB,SAAA,EAAA,UAAA,KAAA,EAaT;AACd3F,UAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA;AAduB,SAAA,CAAA,CAAA;AAA3BiH,OAAAA,CAAAA;;AAkBAA,MAAAA,QAAQ,CAARA,WAAAA,GAAuB,YAAM;AAC3BtB,QAAAA,KAAK,CAALA,SAAAA,GAAkB,KAAK,CAAL,SAAA,CAAA,MAAA,CAAuB,UAAA,CAAA,EAAC;AAAA,iBAAIE,CAAC,CAADA,EAAAA,KAASoB,QAAQ,CAArB,EAAA;AAA1CtB,SAAkB,CAAlBA;;AAEA,YAAI,CAACA,KAAK,CAALA,SAAAA,CAAL,MAAA,EAA6B;AAC3BA,UAAAA,KAAK,CAALA,cAAAA;AACAA,UAAAA,KAAK,CAALA,MAAAA;;AAEA,cAAI,CAAJ,QAAA,EAAe;AACb;AACAA,YAAAA,KAAK,CAALA,yBAAAA;AACD;AACF;AAXHsB,OAAAA;;AAcA,aAAA,QAAA;AA7MqE,KA0HvEtB,CA1HuE,CAAA;;;AAiNvE,QAAM8B,YAAY,GAAA,MAAA,CAAA,UAAA,OAAA,EAA+B;AAAA,WAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAATvG,IAAS,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAATA,QAAAA,IAAS,CAAA,KAAA,GAAA,CAAA,CAATA,GAAS,SAAA,CAAA,KAAA,CAATA;AAAS;;AAAA,aAAA,MAAA,CAAA,YAC3C;AACF;AACA,YAAMwG,OAAO,GAAGtG,OAAO,CAAPA,KAAAA,CAAAA,KAAAA,CAAAA,EAAWuE,KAAK,CAALA,MAAAA,CAAAA,mBAAAA,CAA3B,IAA2BA,CAAXvE,CAAhB;;AAEAuE,QAAAA,KAAK,CAALA,cAAAA,GAAuB,YAAA;AAAA,iBAAM+B,OAAO,CAAb,MAAMA,IAAN,IAAMA,GAAN,KAAA,CAAMA,GAAAA,OAAO,CAAb,MAAMA,EAAN;AAAvB/B,SAAAA;;AAJE,eAAA,MAAA,CAAA,OAAA,EAAA,UAAA,IAAA,EAAA;AAOF,iBAAOA,KAAK,CAAZ,0BAAA;AAEA,iBAAOA,KAAK,CAAZ,cAAA;AACA,cAAIA,KAAK,CAAT,SAAA,EAAqB,MAAMA,KAAK,CAAX,SAAA;AAErB,iBAAA,IAAA;AAZE,SAAA,CAAA;AAD2C,OAAA,EAAA,UAAA,KAAA,EAc/B;AAAA,YAAA,KAAA,GAAA,KAAA;AACd,eAAOA,KAAK,CAAZ,cAAA;AACA,YAAIA,KAAK,CAAT,SAAA,EAAqB,MAAMA,KAAK,CAFlB,SAEO,CAFP,CAAA;;AAKdA,QAAAA,KAAK,CAALA,QAAAA,CAAe;AAAEoB,UAAAA,IAAI,EAAEpC;AAAR,SAAfgB,EALc,CAAA;;AAAA,eAAA,OAAA,CAAA,YAAA;AAAA,cASZA,KAAK,CAALA,MAAAA,CAAAA,KAAAA,KAAAA,IAAAA,IACAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,IAA4BA,KAAK,CAALA,MAAAA,CAD5BA,KAAAA,IAEC,OAAOA,KAAK,CAALA,MAAAA,CAAP,KAAA,KAAA,UAAA,IACCA,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAnBA,YAAAA,EAZU,KAYVA,CAZU,EAAA;AAcZ;AACA,gBAAI,CAAC6B,iBAAL,EAAA,EAA0B;AACxB;AACA7B,cAAAA,KAAK,CAALA,0BAAAA,GAAAA,IAAAA;AAFwB,cAAA,KAAA,GAAA,IAAA;AAAA,qBAGjB,IAAA,OAAA,CAHiB,IAGjB,CAHiB;AAIzB;;AAED,mBAAOA,KAAK,CArBA,0BAqBZ,CArBY,CAAA;;AAwBZ,gBAAMgC,KAAK,GAAGC,gBAAgB,CAC5BjC,KAAK,CAALA,MAAAA,CAD4B,UAAA,EAE5BA,KAAK,CAALA,KAAAA,CA1BU,YAwBkB,CAA9B,CAxBY,CAAA;;AAAA,YAAA,KAAA,GAAA,IAAA;AAAA,mBAAA,MAAA,CA8BC,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AAC5C;AACAA,cAAAA,KAAK,CAALA,YAAAA,GAAqBU,UAAU,CAAA,MAAA,CAAA,YAAa;AAAA,uBACtCV,KAAK,CADiC,SACtCA,GAAwBkC,MAAM,CAAClC,KAAK,CADE,SACR,CAA9BA,GADsC,MAAA,CAAA,YAGtC;AAAA,yBAAA,MAAA,CACiB8B,YAAY,CAAZA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CADjB,IACiBA,CAAAA,CADjB,EAAA,UAAA,IAAA,EAAA;AAEF,wBAAI9B,KAAK,CAAT,SAAA,EAAqB,OAAOkC,MAAM,CAAClC,KAAK,CAAnB,SAAa,CAAb;AACrBmC,oBAAAA,OAAO,CAAPA,IAAO,CAAPA;AAHE,mBAAA,CAAA;AAHsC,iBAAA,EAAA,UAAA,KAAA,EAO1B;AACd,sBAAInC,KAAK,CAAT,SAAA,EAAqB,OAAOkC,MAAM,CAAClC,KAAK,CAAnB,SAAa,CAAb;AACrBkC,kBAAAA,MAAM,CAANA,KAAM,CAANA;AATwC,iBAAA,CAAA;AAAb,eAAA,CAAA,EAA/BlC,KAA+B,CAA/BA;AAhCU,aA8BC,CA9BD,CAAA;AAAA;AAAA,SAAA,EAAA,UAAA,QAAA,EAAA;AAAA,cAAA,KAAA,EAAA,OAAA,QAAA;AA+Cd,gBAAA,KAAA;AA/Cc,SAAA,CAAA;AAd+B,OAAA,CAAA;AAAjD,KAAkB,CAAlB;;AAiEAA,IAAAA,KAAK,CAALA,KAAAA,GAAAA,MAAAA,CAAAA,UAAAA,MAAAA,EAA4D;AAAA,UAAA,KAAA,GAAA,MAAA,KAAA,KAAA,CAAA,GAAP,EAAO,GAAA,MAAA;AAAA,UAAA,eAAA,GAAA,KAAA,CAArCoC,SAAqC;AAAA,UAArCA,SAAqC,GAAA,eAAA,KAAA,KAAA,CAAA,GAAzBpC,KAAK,CAACvE,OAAmB,GAAA,eAAA,CAAA,CAC1D;;;AACA,UAAI,CAACuE,KAAK,CAAV,OAAA,EAAoB;AAClBA,QAAAA,KAAK,CAALA,OAAAA,GAAgB,MAAA,CAAA,YAAa;AAC3B;AACAA,UAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AAEA,cAAMqC,iBAAiB,GAAA,GAAA,MAAA,CAAOrC,KAAK,CAAnC,SAAuB,CAAvB;;AAEA,cAAIA,KAAK,CAAT,YAAA,EAAwB;AACtBqC,YAAAA,iBAAiB,CAAjBA,OAAAA,CAA0BrC,KAAK,CAA/BqC,gBAAAA;AACD;;AAR0B,iBAAA,MAAA,CAAA,YAUvB;AACF;AACArC,YAAAA,KAAK,CAALA,QAAAA,CAAe;AAAEoB,cAAAA,IAAI,EAAEjC;AAAR,aAAfa,EAFE,CAAA;;AAAA,mBAAA,MAAA,CAKe8B,YAAY,CAAZA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAA2B9B,KAAK,CAL/C,QAKe8B,CAAAA,CALf,EAAA,UAAA,IAAA,EAAA;AAOF9B,cAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,GAAA,EAAG;AAAA,uBACfA,KAAK,CAALA,MAAAA,CAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,IAAAA,GAAAA,GADe,IAAA;AAAjBA,eAAAA;AAIAqC,cAAAA,iBAAiB,CAAjBA,OAAAA,CACE,UAAA,QAAA,EAAQ;AAAA,uBACNf,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,IACAA,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,CAA0BtB,KAAK,CAALA,KAAAA,CAFpB,IAENsB,CAFM;AADVe,eAAAA;AAMAA,cAAAA,iBAAiB,CAAjBA,OAAAA,CACE,UAAA,QAAA,EAAQ;AAAA,uBACNf,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,IACAA,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,CAA0BtB,KAAK,CAALA,KAAAA,CAA1BsB,IAAAA,EAFM,IAENA,CAFM;AADVe,eAAAA;AAMA,qBAAOrC,KAAK,CAAZ,OAAA;AAEA,qBAAA,IAAA;AAzBE,aAAA,CAAA;AAVuB,WAAA,EAAA,UAAA,KAAA,EAoCX;AACdA,YAAAA,KAAK,CAALA,QAAAA,CAAe;AACboB,cAAAA,IAAI,EADS,WAAA;AAEbqB,cAAAA,SAAS,EAAElI,KAAK,KAAKyF,KAAK,CAFb,SAAA;AAGbzF,cAAAA,KAAK,EAALA;AAHa,aAAfyF;AAMA,mBAAOA,KAAK,CAAZ,OAAA;;AAPc,gBASVzF,KAAK,KAAKyF,KAAK,CATL,SAAA,EAAA;AAUZqC,cAAAA,iBAAiB,CAAjBA,OAAAA,CACE,UAAA,QAAA,EAAQ;AAAA,uBACNf,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,IAA2BA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,CADrB,KACqBA,CADrB;AADVe,eAAAA;AAKAA,cAAAA,iBAAiB,CAAjBA,OAAAA,CACE,UAAA,QAAA,EAAQ;AAAA,uBACNf,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,IACAA,QAAQ,CAARA,MAAAA,CAAAA,SAAAA,CAAAA,SAAAA,EAFM,KAENA,CAFM;AADVe,eAAAA;AAMA,oBAAA,KAAA;AArBY;AApCW,WAAA,CAAA;AAA7BrC,SAAgB,CAAA,EAAhBA;AA6DD;;AAED,aAAOA,KAAK,CAAZ,OAAA;AAlEFA,KAAAA,CAAAA;AAqEA,WAAA,KAAA;AACD;;AAED,SAAA,UAAA;AACD;;AAEM,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAqC;AAC1C,MAAM0C,QAAQ,GAAGC,aAAa,CAAA,KAAA,EAA9B,MAA8B,CAA9B;AAEA9H,EAAAA,MAAM,CAANA,MAAAA,CAAAA,QAAAA,EAAwB;AACtB+H,IAAAA,SAAS,EAAEF,QAAQ,CAARA,MAAAA,KADW,aAAA;AAEtBG,IAAAA,SAAS,EAAEH,QAAQ,CAARA,MAAAA,KAFW,aAAA;AAGtBI,IAAAA,OAAO,EAAEJ,QAAQ,CAARA,MAAAA,KAHa,WAAA;AAItBK,IAAAA,MAAM,EAAEL,QAAQ,CAARA,MAAAA,KAAoB/I;AAJN,GAAxBkB;AAOA,SAAA,QAAA;AACD;;AAED,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAsC;AACpC,UAAQmI,MAAM,CAAd,IAAA;AACE,SAAA,UAAA;AACE,aAAO;AACLC,QAAAA,MAAM,EAAED,MAAM,CADT,aAAA;AAELzI,QAAAA,KAAK,EAFA,IAAA;AAGLqF,QAAAA,UAAU,EAAEoD,MAAM,CAANA,aAAAA,KAHP,SAAA;AAILE,QAAAA,YAAY,EAJP,KAAA;AAKLC,QAAAA,YAAY,EALP,CAAA;AAMLpC,QAAAA,OAAO,EAAEiC,MAAM,CANV,OAAA;AAOLI,QAAAA,0BAA0B,EAPrB,KAAA;AAQLC,QAAAA,IAAI,EAAEL,MAAM,CARP,WAAA;AASLM,QAAAA,SAAS,EAAEN,MAAM,CAANA,cAAAA,GAAwBO,IAAI,CAA5BP,GAAwBO,EAAxBP,GAAqC;AAT3C,OAAP;;AAWF,SAAA,YAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEG,QAAAA,YAAY,EAAEjC,KAAK,CAALA,YAAAA,GAAqB;AAFrC,OAAA,CAAA;;AAIF,SAAA,eAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEH,QAAAA,OAAO,EAAE;AAFX,OAAA,CAAA;;AAIF,SAAA,YAAA;AAAmB;AACjB,eAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEqC,UAAAA,0BAA0B,EAAE;AAF9B,SAAA,CAAA;AAID;;AACD,SAAA,WAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEH,QAAAA,MAAM,EACJ,OAAO/B,KAAK,CAAZ,IAAA,KAAA,WAAA,GAAA,aAAA,GAHJ,aAAA;AAIEtB,QAAAA,UAAU,EAJZ,IAAA;AAKEuD,QAAAA,YAAY,EAAE;AALhB,OAAA,CAAA;;AAOF,SAAA,aAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEF,QAAAA,MAAM,EAFR,aAAA;AAGEI,QAAAA,IAAI,EAAEpB,gBAAgB,CAACe,MAAM,CAAP,OAAA,EAAiB9B,KAAK,CAH9C,IAGwB,CAHxB;AAIE3G,QAAAA,KAAK,EAJP,IAAA;AAKEwG,QAAAA,OAAO,EALT,KAAA;AAMEnB,QAAAA,UAAU,EANZ,KAAA;AAOEsD,QAAAA,YAAY,EAAEF,MAAM,CAPtB,YAAA;AAQEM,QAAAA,SAAS,EAAEC,IAAI,CARjB,GAQaA,EARb;AASEJ,QAAAA,YAAY,EAAE;AAThB,OAAA,CAAA;;AAWF,SAAA,WAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEvD,QAAAA,UAAU,EAFZ,KAAA;AAGEmB,QAAAA,OAAO,EAAE;AAHX,OAAA,EAIM,CAACiC,MAAM,CAAP,SAAA,IAAqB;AACvBC,QAAAA,MAAM,EADiB,WAAA;AAEvB1I,QAAAA,KAAK,EAAEyI,MAAM,CAFU,KAAA;AAGvBQ,QAAAA,oBAAoB,EAAE;AAHC,OAJ3B,CAAA;;AAUF,SAAA,cAAA;AACE,aAAOvB,gBAAgB,CAACe,MAAM,CAAP,OAAA,EAAvB,KAAuB,CAAvB;;AACF;AACE,YAAM,IAAN,KAAM,EAAN;AA/DJ;AAiED;;ACrqBD,IAAMS,qBAAqB,GAA3B,kBAAA;AACA,IAAMC,UAAU,GAAhB,OAAA;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAI9B,iBAAiB,MAAM+B,QAA3B,EAAA,EAAuC;AACrChF,IAAAA,WAAW,CAAXA,OAAAA,CAAoB,UAAA,UAAA,EAAU;AAAA,aAC5B,UAAU,CAAV,iBAAA,CACqB,UAAA,KAAA,EAAS;AAC1B,YAAI,CAACoB,KAAK,CAALA,SAAAA,CAAL,MAAA,EAA6B;AAC3B,iBAAA,KAAA;AACD;;AAED,YAAI,CAAC,KAAK,CAAL,SAAA,CAAA,IAAA,CAAqB,UAAA,QAAA,EAAQ;AAAA,iBAAIsB,QAAQ,CAARA,MAAAA,CAAJ,OAAA;AAAlC,SAAK,CAAL,EAAgE;AAC9D,iBAAA,KAAA;AACD;;AAED,YAAI,CAACtB,KAAK,CAALA,KAAAA,CAAL,OAAA,EAA0B;AACxB,iBAAA,KAAA;AACD;;AAED,YAAIA,KAAK,CAAT,0BAAA,EAAsC;AACpC;AACA,iBAAOA,KAAK,CAAZ,OAAA;AACD;;AAED,eAAOA,KAAK,CAALA,MAAAA,CAAP,oBAAA;AAnBJ,OAAA,EAAA,KAAA,CAqBS3F,OAAO,CAtBY,KAC5B,CAD4B;AAA9BuE,KAAAA;AAwBD;AA1BH,CAAA;;AA6BA,IAAA,qBAAA;;AAEO,SAAA,eAAA,CAAA,QAAA,EAAmC;AACxC;AACA,MAAA,qBAAA,EAA2B;AACzBiF,IAAAA,qBAAqB;AAHiB,GAAA,CAAA;;;AAMxCA,EAAAA,qBAAqB,GAAGhI,QAAQ,CAAhCgI,aAAgC,CAAhCA;AACD;;AAEDC,eAAe,CAAC,UAAA,WAAA,EAAe;AAAA,MAAA,OAAA,CAAA,CAC7B;;;AACA,MAAI,CAAA,QAAA,KAAA,CAAA,OAAA,GAAA,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAaC,OAAAA,CAAjB,gBAAI,CAAJ,EAA2C;AACzCA,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,qBAAAA,EAAAA,WAAAA,EAAAA,KAAAA;AACAA,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,UAAAA,EAAAA,WAAAA,EAAAA,KAAAA;AAEA,WAAO,YAAM;AACX;AACAA,MAAAA,MAAM,CAANA,mBAAAA,CAAAA,qBAAAA,EAAAA,WAAAA;AACAA,MAAAA,MAAM,CAANA,mBAAAA,CAAAA,UAAAA,EAAAA,WAAAA;AAHF,KAAA;AAKD;AAXHD,CAAe,CAAfA;;ACzCO,SAAA,aAAA,GAAyB;AAC9B,MAAMrF,UAAU,GAAGI,aAAnB,EAAA;;AAD8B,MAAA,iBAAA,GAEE,KAAK,CAAL,UAAA,CAAiB,UAAA,CAAA,EAAC;AAAA,WAAIqB,CAAC,GAAL,CAAA;AAAlB,GAAA,EAFF,CAEE,CAFF;AAAA,MAEvBgB,KAFuB,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,MAEhB8C,cAFgB,GAAA,iBAAA,CAAA,CAAA,CAAA;;AAG9B,MAAMC,QAAQ,GAAGC,kBAAkB,CAAnC,cAAmC,CAAnC;AAEAvJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAA;AAAA,WAAM8D,UAAU,CAAVA,SAAAA,CAAN,QAAMA,CAAN;AAAhB9D,GAAAA,EAAsD,CAAA,UAAA,EAAtDA,QAAsD,CAAtDA;AAEA,SAAO,KAAK,CAAL,OAAA,CAAc,YAAA;AAAA,WAAMuG,KAAK,IAAIzC,UAAU,CAAzB,UAAA;AAAd,GAAA,EAAoD,CACzDA,UAAU,CAD+C,UAAA,EAA3D,KAA2D,CAApD,CAAP;AAID;;ACoEM,SAAA,QAAA,CAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAqC;AAC3C,MAAA,MAAA,EAAY;AACX,WAAO0B,IAAI,GAAGA,IAAI,CAAP,KAAO,CAAP,GAAX,KAAA;AACA;;AACD,MAAI,CAAA,KAAA,IAAU,CAACrF,KAAK,CAApB,IAAA,EAA2B;AAC1BA,IAAAA,KAAK,GAAG+E,OAAO,CAAPA,OAAAA,CAAR/E,KAAQ+E,CAAR/E;AACA;;AACD,SAAOqF,IAAI,GAAGrF,KAAK,CAALA,IAAAA,CAAH,IAAGA,CAAH,GAAX,KAAA;AACA;;AA3ED,IAAMqJ,eAAe,GAAG,SAAlBA,eAAkB,GAAA;AAAA,SAAO;AAC7BlB,IAAAA,MAAM,EADuB,UAAA;AAE7BI,IAAAA,IAAI,EAFyB,SAAA;AAG7B9I,IAAAA,KAAK,EAAE;AAHsB,GAAP;AAAxB,CAAA;;AA+kBO,SAAA,QAAA,GAAkB,CAAA;;AAzkBzB,IAAM6J,WAAW,GAAjB,EAAA;;AAwEO,SAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAsC;AAC5C,MAAI,CAAJ,MAAA,EAAa;AACZ,WAAOtJ,KAAK,IAAI,KAAK,CAAdA,IAAAA,GAAsBA,KAAK,CAALA,IAAAA,CAAtBA,QAAsBA,CAAtBA,GAA2C+E,OAAO,CAAzD,OAAkDA,EAAlD;AACA;AACD;;AA3ED,IAAMwE,aAAa,GAAnB,EAAA;;AAygBO,SAAA,SAAA,CAAA,IAAA,EAAA,IAAA,EAA6B;AACnC,MAAI/B,MAAM,GAAGC,IAAb,EAAA;;AACA,MAAID,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAP,IAAOA,CAAP;AACA;;AACD,SAAOnC,IAAI,CAAX,MAAW,CAAX;AACA;;AA9gBD,IAAMmE,aAAa,GAAnB,EAAA;;AAyhBO,SAAA,QAAA,CAAA,IAAA,EAAA,OAAA,EAA+B;AACrC,MAAI;AACH,QAAIhC,MAAM,GAAGC,IAAb,EAAA;AADD,GAAA,CAEE,OAAA,CAAA,EAAS;AACV,WAAOC,OAAO,CAAd,CAAc,CAAd;AACA;;AACD,MAAIF,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAY,KAAZA,CAAAA,EAAP,OAAOA,CAAP;AACA;;AACD,SAAA,MAAA;AACA;;AAliBD,IAAMiC,YAAY,GAAlB,EAAA;;AA4CO,SAAA,QAAA,CAAA,CAAA,EAAmB;AACzB,SAAOO,YAAW;AACjB,SAAK,IAAIvJ,IAAI,GAAR,EAAA,EAAeS,CAAC,GAArB,CAAA,EAA2BA,CAAC,GAAG2D,SAAS,CAAxC,MAAA,EAAiD3D,CAAjD,EAAA,EAAsD;AACrDT,MAAAA,IAAI,CAAJA,CAAI,CAAJA,GAAUoE,SAAS,CAAnBpE,CAAmB,CAAnBA;AACA;;AACD,QAAI;AACH,aAAOsE,OAAO,CAAPA,OAAAA,CAAgBC,CAAC,CAADA,KAAAA,CAAAA,IAAAA,EAAvB,IAAuBA,CAAhBD,CAAP;AADD,KAAA,CAEE,OAAA,CAAA,EAAS;AACV,aAAOA,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;AACA;AARF,GAAA;AAUA;;AArDD,SAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAwC;AACtC,MAAImD,MAAM,CAANA,IAAAA,KAAJ,WAAA,EAAiC;AAC/B,WAAOmB,eAAP,EAAA;AACD;;AACD,MAAInB,MAAM,CAANA,IAAAA,KAAJ,aAAA,EAAmC;AACjC,WAAO;AACLC,MAAAA,MAAM,EAAErJ;AADH,KAAP;AAGD;;AACD,MAAIoJ,MAAM,CAANA,IAAAA,KAAJ,aAAA,EAAmC;AACjC,WAAO;AACLC,MAAAA,MAAM,EADD,aAAA;AAELI,MAAAA,IAAI,EAAEL,MAAM,CAACK;AAFR,KAAP;AAID;;AACD,MAAIL,MAAM,CAANA,IAAAA,KAAJ,YAAA,EAAkC;AAChC,WAAO;AACLC,MAAAA,MAAM,EADD,WAAA;AAEL1I,MAAAA,KAAK,EAAEyI,MAAM,CAACzI;AAFT,KAAP;AAID;;AACD,QAAM,IAAN,KAAM,EAAN;AACD;;AAEM,SAAA,WAAA,CAAA,UAAA,EAAA,MAAA,EAA8C;AAAA,MAAbmB,MAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,MAAa,GAAJ,EAATA;AAAa;;AAAA,MAAA,iBAAA,GACnBf,KAAK,CAALA,UAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EADmB,eACnBA,CADmB;AAAA,MAC5CuG,KAD4C,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,MACrCsD,cADqC,GAAA,iBAAA,CAAA,CAAA,CAAA;;AAOnD,MAAMC,QAAQ,GAAGP,kBAAkB,CAAnC,cAAmC,CAAnC;AAEA,MAAMQ,aAAa,GAAGC,YAAY,CAAlC,UAAkC,CAAlC;AAEA,MAAMC,SAAS,GAAGD,YAAY,CAAA,QAAA,CAAA,EAAA,EACzB1G,gBAAgB,GADS,MAAA,EAEzBA,gBAAgB,GAFS,SAAA,EAA9B,MAA8B,CAAA,CAA9B;AAMA,MAAM4G,iBAAiB,GAAGlK,KAAK,CAA/B,MAA0BA,EAA1B;AAEA,MAAMmK,MAAM,GAAG,KAAK,CAAL,WAAA,CAAA,QAAA,CAAA,UAAA,SAAA,EAAA,KAAA,EAIR;AAAA,QAAA,IAAA,GAAA,KAAA,KAAA,KAAA,CAAA,GADoE,EACpE,GAAA,KAAA;AAAA,QAAA,cAAA,GAAA,IAAA,CADDvH,SACC;AAAA,QADDA,SACC,GAAA,cAAA,KAAA,KAAA,CAAA,GADWpD,IACX,GAAA,cAAA;AAAA,QAAA,YAAA,GAAA,IAAA,CADiBmD,OACjB;AAAA,QADiBA,OACjB,GAAA,YAAA,KAAA,KAAA,CAAA,GAD2BnD,IAC3B,GAAA,YAAA;AAAA,QAAA,cAAA,GAAA,IAAA,CADiCqD,SACjC;AAAA,QADiCA,SACjC,GAAA,cAAA,KAAA,KAAA,CAAA,GAD6CrD,IAC7C,GAAA,cAAA;AAAA,QADmDwD,YACnD,GAAA,IAAA,CADmDA,YACnD;;AACH,QAAMjC,MAAM,GAAGkJ,SAAf,EAAA;AAEA,QAAMG,UAAU,GAAG/K,GAAnB,EAAA;AACA6K,IAAAA,iBAAiB,CAAjBA,OAAAA,GAAAA,UAAAA;;AAEA,QAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAA;AAAA,aAAMH,iBAAiB,CAAjBA,OAAAA,KAAN,UAAA;AAAjB,KAAA;;AAEAJ,IAAAA,QAAQ,CAAC;AAAErD,MAAAA,IAAI,EAAEiD;AAAR,KAAD,CAARI;AAEA,QAAA,aAAA;AAVG,WAAA,QAAA,CAAA,YAYC;AAAA,aAAA,QAAA,CACoB/I,MAAM,CAANA,QAAAA,CADpB,SACoBA,CADpB,EAAA,UAAA,gBAAA,EAAA;AACFuJ,QAAAA,aAAa,GAAbA,gBAAAA;AAEA,YAAA,IAAA;AAHE,eAAA,SAAA,CAAA,YAAA;AAAA,cAKED,QALF,EAAA,EAAA;AAAA,mBAAA,QAAA,CAMaN,aAAa,GAN1B,SAM0B,CAN1B,EAAA,UAAA,cAAA,EAAA;AAMArB,cAAAA,IAAI,GAAJA,cAAAA;AANA,aAAA,CAAA;AAAA;AAAA,SAAA,EAAA,YAAA;AASF,cAAI2B,QAAJ,EAAA,EAAgB;AACdP,YAAAA,QAAQ,CAAC;AAAErD,cAAAA,IAAI,EAAN,aAAA;AAAuBiC,cAAAA,IAAI,EAAJA;AAAvB,aAAD,CAARoB;AACD;;AAXC,iBAAA,SAAA,CAAA,YAAA;AAAA,gBAaEO,QAbF,EAAA,EAAA;AAAA,qBAAA,eAAA,CAcMtJ,MAAM,CAANA,SAAAA,CAAAA,IAAAA,EAdN,SAcMA,CAdN,CAAA;AAAA;AAAA,WAAA,EAAA,YAAA;AAAA,mBAAA,SAAA,CAAA,YAAA;AAAA,kBAiBEsJ,QAjBF,EAAA,EAAA;AAAA,uBAAA,eAAA,CAkBMzH,SAAS,CAAA,IAAA,EAlBf,SAkBe,CAlBf,CAAA;AAAA;AAAA,aAAA,EAAA,YAAA;AAAA,qBAAA,SAAA,CAAA,YAAA;AAAA,oBAqBEyH,QArBF,EAAA,EAAA;AAAA,yBAAA,eAAA,CAsBMtJ,MAAM,CAANA,SAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAtBN,SAsBMA,CAtBN,CAAA;AAAA;AAAA,eAAA,EAAA,YAAA;AAAA,uBAAA,SAAA,CAAA,YAAA;AAAA,sBAyBEsJ,QAzBF,EAAA,EAAA;AAAA,2BAAA,eAAA,CA0BMxH,SAAS,CAAA,IAAA,EAAA,IAAA,EA1Bf,SA0Be,CA1Bf,CAAA;AAAA;AAAA,iBAAA,EAAA,YAAA;AA6BF,yBAAA,IAAA;AA7BE,iBAAA,CAAA;AAAA,eAAA,CAAA;AAAA,aAAA,CAAA;AAAA,WAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAAA,CAAA;AAZD,KAAA,EAAA,UAAA,KAAA,EA0Ca;AAAA,aAAA,SAAA,CAAA,YAAA;AAAA,YACVwH,QADU,EAAA,EAAA;AAEZ3K,UAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA;AAFY,iBAAA,eAAA,CAGNqB,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAAA,SAAAA,EAHM,aAGNA,CAHM,CAAA;AAAA;AAAA,OAAA,EAAA,YAAA;AAAA,eAAA,SAAA,CAAA,YAAA;AAAA,cAMVsJ,QANU,EAAA,EAAA;AAAA,mBAAA,eAAA,CAON1H,OAAO,CAAA,KAAA,EAAA,SAAA,EAPD,aAOC,CAPD,CAAA;AAAA;AAAA,SAAA,EAAA,YAAA;AAAA,iBAAA,SAAA,CAAA,YAAA;AAAA,gBAUV0H,QAVU,EAAA,EAAA;AAAA,qBAAA,eAAA,CAWNtJ,MAAM,CAANA,SAAAA,CAAAA,SAAAA,EAAAA,KAAAA,EAAAA,SAAAA,EAXM,aAWNA,CAXM,CAAA;AAAA;AAAA,WAAA,EAAA,YAAA;AAAA,mBAAA,SAAA,CAAA,YAAA;AAAA,kBAcVsJ,QAdU,EAAA,EAAA;AAAA,uBAAA,eAAA,CAeNxH,SAAS,CAAA,SAAA,EAAA,KAAA,EAAA,SAAA,EAfH,aAeG,CAfH,CAAA;AAAA;AAAA,aAAA,EAAA,YAAA;AAAA,kBAkBVwH,QAlBU,EAAA,EAAA;AAmBZP,gBAAAA,QAAQ,CAAC;AAAErD,kBAAAA,IAAI,EAAN,YAAA;AAAsB7G,kBAAAA,KAAK,EAALA;AAAtB,iBAAD,CAARkK;;AAnBY,oBAqBR9G,YArBQ,IAAA,IAqBRA,GArBQ,YAqBRA,GAAgBjC,MAAM,CArBd,YAAA,EAAA;AAsBV,wBAAA,KAAA;AAtBU;AAAA;AAAA,aAAA,CAAA;AAAA,WAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAAA,CAAA;AA1Cb,KAAA,CAAA;AAJQ,GAAA,CAAA,EAyEb,CAAA,QAAA,EAAA,SAAA,EAzEF,aAyEE,CAzEa,CAAf;AA4EA,MAAMwJ,KAAK,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAA;AAAA,WAAMT,QAAQ,CAAC;AAAErD,MAAAA,IAAI,EAAEgD;AAAR,KAAD,CAAd;AAAlB,GAAA,EAAyD,CAAvE,QAAuE,CAAzD,CAAd;AAIAzJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AAAA,QAAA,UAAA,GACmBiK,SADnB,EAAA;AAAA,QACZrI,QADY,GAAA,UAAA,CAAA,QAAA;AAAA,QACFkB,gBADE,GAAA,UAAA,CAAA,gBAAA;;AAGpB,QAAI,CAACA,gBAAD,IAAA,IAACA,GAAD,gBAACA,GAAD,QAAA,KAAkCyD,KAAK,CAA3C,KAAA,EAAmD;AACjD,YAAMA,KAAK,CAAX,KAAA;AACD;AALHvG,GAAAA,EAMG,CAAA,SAAA,EAAYuG,KAAK,CANpBvG,KAMG,CANHA;AAQA,SAAO,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAIHuK,IAAAA,KAAK,EAJF,KAAA;AAKHnC,IAAAA,MAAM,EAAE7B,KAAK,CAALA,MAAAA,KALL,UAAA;AAMH0B,IAAAA,SAAS,EAAE1B,KAAK,CAALA,MAAAA,KANR,aAAA;AAOH2B,IAAAA,SAAS,EAAE3B,KAAK,CAALA,MAAAA,KAPR,aAAA;AAQH4B,IAAAA,OAAO,EAAE5B,KAAK,CAALA,MAAAA,KAAiBrH;AARvB,GAAA,CAAA,CAAP;AAWD;;ACsbM,SAAA,QAAA,GAAkB,CAAA;;AAjgBlB,SAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAsC;AAC5C,MAAI,CAAJ,MAAA,EAAa;AACZ,WAAOiB,KAAK,IAAIA,KAAK,CAAdA,IAAAA,GAAsBA,KAAK,CAALA,IAAAA,CAAtBA,QAAsBA,CAAtBA,GAA2C+E,OAAO,CAAzD,OAAkDA,EAAlD;AACA;AACD;;AA+cM,SAAA,QAAA,CAAA,IAAA,EAAA,OAAA,EAA+B;AACrC,MAAI;AACH,QAAIyC,MAAM,GAAGC,IAAb,EAAA;AADD,GAAA,CAEE,OAAA,CAAA,EAAS;AACV,WAAOC,OAAO,CAAd,CAAc,CAAd;AACA;;AACD,MAAIF,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAY,KAAZA,CAAAA,EAAP,OAAOA,CAAP;AACA;;AACD,SAAA,MAAA;AACA;;AAjdM,SAAA,kBAAA,CAAA,KAAA,EAAiC;AACvC,MAAIxH,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACxB,WAAOA,KAAK,CAALA,IAAAA,CAAP,QAAOA,CAAP;AACA;AACD;;AAzCM,SAAA,QAAA,CAAA,CAAA,EAAmB;AACzB,SAAO,YAAW;AACjB,SAAK,IAAIS,IAAI,GAAR,EAAA,EAAeS,CAAC,GAArB,CAAA,EAA2BA,CAAC,GAAG2D,SAAS,CAAxC,MAAA,EAAiD3D,CAAjD,EAAA,EAAsD;AACrDT,MAAAA,IAAI,CAAJA,CAAI,CAAJA,GAAUoE,SAAS,CAAnBpE,CAAmB,CAAnBA;AACA;;AACD,QAAI;AACH,aAAOsE,OAAO,CAAPA,OAAAA,CAAgBC,CAAC,CAADA,KAAAA,CAAAA,IAAAA,EAAvB,IAAuBA,CAAhBD,CAAP;AADD,KAAA,CAEE,OAAA,CAAA,EAAS;AACV,aAAOA,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;AACA;AARF,GAAA;AAUA;;AAzEM,SAAA,YAAA,CAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAsD;AAAA,MAAbnE,MAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,MAAa,GAAJ,EAATA;AAAa,GAAA,CAC3D;;;AACA,MAAMuI,QAAQ,GAAGC,kBAAkB,CAACvJ,KAAK,CAALA,QAAAA,GAFuB,CAEvBA,CAAD,CAAnC,CAF2D,CAAA;;AAK3D,MAAMyB,aAAa,GAAG6B,gBAAtB,EAAA;AAEAvC,EAAAA,MAAM,GAAA,QAAA,CAAA,EAAA,EACDU,aAAa,CADZ,MAAA,EAEDA,aAAa,CAFZ,OAAA,EAPqD,MAOrD,CAANV,CAP2D,CAAA;;AAc3D,MAAM+C,UAAU,GAAGI,aAdwC,EAc3D,CAd2D,CAAA;;AAiB3D,MAAMmB,KAAK,GAAGvB,UAAU,CAAVA,UAAAA,CAAAA,QAAAA,EAAAA,OAAAA,EAjB6C,MAiB7CA,CAAd,CAjB2D,CAAA;;AAoB3D,MAAM0G,WAAW,GAAGxK,KAAK,CApBkC,MAoBvCA,EAApB,CApB2D,CAAA;;AAuB3DA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBwK,IAAAA,WAAW,CAAXA,OAAAA,GAAsB,KAAK,CAAL,SAAA,CAAgB,YAAA;AAAA,aAAMlB,QAAQ,CAAd,EAAc,CAAd;AADlB,KACE,CAAtBkB,CADoB,CAAA;;AAIpB,WAAOA,WAAW,CAAXA,OAAAA,CAAP,WAAA;AAJFxK,GAAAA,EAKG,CAAA,KAAA,EA5BwD,QA4BxD,CALHA,EAvB2D,CAAA;;AA+B3DA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBwK,IAAAA,WAAW,CAAXA,OAAAA,CAAAA,YAAAA,CAAAA,MAAAA;AAhCyD,GA+B3DxK,EA/B2D,CAAA;;AAoC3DA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIe,MAAM,CAANA,OAAAA,IAAJ,KAAA,EAA6B;AAG7ByJ,IAAAA,WAAW,CAAXA,OAAAA,CAAAA,GAAAA;AAJFxK,GAAAA,EAKG,CAACe,MAAM,CAAP,OAAA,EALHf,KAKG,CALHA;AAOA,MAAMyK,OAAO,GAAG,KAAK,CAAL,WAAA,CAAA,QAAA,CAAA,YAA8B;AAAA,WAAA,kBAAA,CAAA,QAAA,CAAA,YACxC;AAAA,aAAA,eAAA,CACIpF,KAAK,CADT,KACIA,EADJ,CAAA;AADwC,KAAA,EAAA,UAAA,KAAA,EAG5B;AACd3F,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA;AAJ0C,KAAA,CAAA,CAAA;AAA9B,GAAA,CAAA,EAMb,CANH,KAMG,CANa,CAAhB;AAQA,SAAA,QAAA,CAAA;AACE2F,IAAAA,KAAK,EADP,KAAA;AAEEoF,IAAAA,OAAO,EAAPA;AAFF,GAAA,EAGKpF,KAAK,CAHV,KAAA,CAAA;AAKD;;AC7DM,SAAA,QAAA,GAA2B;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANzE,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,IAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAChC,MAAMyE,KAAK,GAAGqF,YAAY,CAAZA,KAAAA,CAAAA,KAAAA,CAAAA,EAAgBzE,YAAY,CAA1C,IAA0C,CAA5ByE,CAAd;AAEAC,EAAAA,cAAc,CAAdA,KAAc,CAAdA;AAEA,SAAA,KAAA;AACD;;ACFM,SAAA,iBAAA,GAAoC;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAN/J,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,IAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAAA,MAAA,aAAA,GACFqF,YAAY,CADV,IACU,CADV;AAAA,MACpCpF,QADoC,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MAC1BC,OAD0B,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MAAA,cAAA,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MACjBC,MADiB,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;;AAGzC,MAAM6J,WAAW,GAAG5K,KAAK,CAHgB,MAGrBA,EAApB,CAHyC,CAAA;;AAMzC,MAAI,OAAO4K,WAAW,CAAlB,OAAA,KAAJ,WAAA,EAAgD;AAC9C,WAAO7J,MAAM,CAAb,WAAA;AACD;;AAED,MAAMI,SAAS,GAAGuJ,YAAY,CAAA,QAAA,EAAA,OAAA,EAA9B,MAA8B,CAA9B;;AAEA,MAAI,CAACvJ,SAAS,CAATA,KAAAA,CAAAA,MAAAA,CAAL,OAAA,EAAqC;AACnCyJ,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,SAAAA;AACD;;AAdwC,MAgB7BC,UAhB6B,GAgBN1J,SAhBM,CAAA,IAAA;AAAA,MAgBjBmH,MAhBiB,GAgBNnH,SAhBM,CAAA,MAAA;AAkBzCnB,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIsI,MAAM,KAANA,SAAAA,IAAwB,OAAA,UAAA,KAA5B,WAAA,EAA+D;AAC7DsC,MAAAA,WAAW,CAAXA,OAAAA,GAAAA,UAAAA;AACD;AAHH5K,GAAAA,EAIG,CAAA,UAAA,EAJHA,MAIG,CAJHA;AAMA,MAAI8K,YAAY,GAAhB,UAAA;;AAEA,MAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvCA,IAAAA,YAAY,GAAGF,WAAW,CAA1BE,OAAAA;AACD;;AAED,MAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvC,QAAMC,SAAS,GAAG;AAChBzC,MAAAA,MAAM,EADU,SAAA;AAEhBH,MAAAA,OAAO,EAFS,KAAA;AAGhBF,MAAAA,SAAS,EAHO,KAAA;AAIhBC,MAAAA,SAAS,EAAE;AAJK,KAAlB;AAOAhI,IAAAA,MAAM,CAANA,MAAAA,CAAciB,SAAS,CAATA,KAAAA,CAAdjB,KAAAA,EAAAA,SAAAA;AACAA,IAAAA,MAAM,CAANA,MAAAA,CAAAA,SAAAA,EAAAA,SAAAA;AACD;;AAED,MAAM8K,kBAAkB,GAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEtBF,IAAAA,YAAY,EAFU,YAAA;AAGtBD,IAAAA,UAAU,EAAVA;AAHsB,GAAA,CAAxB;;AAMAF,EAAAA,cAAc,CAAdA,kBAAc,CAAdA;AAEA,SAAA,kBAAA;AACD;;AC0BM,SAAA,QAAA,CAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAqC;AAC3C,MAAA,MAAA,EAAY;AACX,WAAOnF,IAAI,GAAGA,IAAI,CAAP,KAAO,CAAP,GAAX,KAAA;AACA;;AACD,MAAI,CAAA,KAAA,IAAU,CAACrF,KAAK,CAApB,IAAA,EAA2B;AAC1BA,IAAAA,KAAK,GAAG+E,OAAO,CAAPA,OAAAA,CAAR/E,KAAQ+E,CAAR/E;AACA;;AACD,SAAOqF,IAAIiC,GAAGtH,KAAK,CAALA,IAAAA,CAAHsH,IAAGtH,CAAHsH,GAAX,KAAA;AACA;;AAogBM,SAAA,QAAA,GAAkB,CAAA;;AAtDlB,SAAA,cAAA,CAAA,IAAA,EAA8B;AACpC,MAAIE,MAAM,GAAGC,IAAb,EAAA;;AACA,MAAID,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAP,QAAOA,CAAP;AACA;AACD;;AAxgBM,SAAA,OAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAqC;AAC3C,MAAI,CAACgE,IAAI,CAAT,CAAA,EAAaC;AACZ,QAAIzL,KAAK,YAAT,KAAA,EAA4B;AAC3B,UAAIA,KAAK,CAAT,CAAA,EAAa;AACZ,YAAIoG,KAAK,GAAT,CAAA,EAAe;AACdA,UAAAA,KAAK,GAAGpG,KAAK,CAAboG,CAAAA;AACA;;AACDpG,QAAAA,KAAK,GAAGA,KAAK,CAAbA,CAAAA;AAJD,OAAA,MAKO;AACNA,QAAAA,KAAK,CAALA,CAAAA,GAAU,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAVA,KAAU,CAAVA;AACA;AACA;AACD;;AACD,QAAIA,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACxBA,MAAAA,KAAK,CAALA,IAAAA,CAAW,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAXA,KAAW,CAAXA,EAA4C,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAA5CA,CAA4C,CAA5CA;AACA;AACA;;AACDwL,IAAAA,IAAI,CAAJA,CAAAA,GAAAA,KAAAA;AACAA,IAAAA,IAAI,CAAJA,CAAAA,GAAAA,KAAAA;AACA,QAAMG,QAAQ,GAAGH,IAAI,CAArB,CAAA;;AACA,QAAA,QAAA,EAAc;AACbG,MAAAA,QAAQ,CAARA,IAAQ,CAARA;AACA;AACD;AACD;;AA9DM,IAAM,KAAA,GAAA,aAAsB,YAAW;AAC7C,WAAA,KAAA,GAAiB,CAAA;;AACjB,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA,GAAuB,UAAA,WAAA,EAAA,UAAA,EAAkC;AACxD,QAAMnE,MAAM,GAAG,IAAf,KAAe,EAAf;AACA,QAAMpB,KAAK,GAAG,KAAd,CAAA;;AACA,QAAA,KAAA,EAAW;AACV,UAAMrF,QAAQ,GAAGqF,KAAK,GAALA,CAAAA,GAAAA,WAAAA,GAAjB,UAAA;;AACA,UAAA,QAAA,EAAc;AACb,YAAI;AACH,UAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAmBrF,QAAQ,CAAC,KAA5B,CAA2B,CAA3B,CAAA;AADD,SAAA,CAEE,OAAA,CAAA,EAAU;AACX,UAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA;;AACD,eAAA,MAAA;AAND,OAAA,MAOO;AACN,eAAA,IAAA;AACA;AACD;;AACD,SAAA,CAAA,GAAS,UAAA,KAAA,EAAgB;AACxB,UAAI;AACH,YAAMf,KAAK,GAAGoL,KAAK,CAAnB,CAAA;;AACA,YAAIA,KAAK,CAALA,CAAAA,GAAJ,CAAA,EAAiB;AAChB,UAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAmBC,WAAW,GAAGA,WAAW,CAAd,KAAc,CAAd,GAA9B,KAAA,CAAA;AADD,SAAA,MAEO,IAAA,UAAA,EAAgB;AACtB,UAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAmBC,UAAU,CAA7B,KAA6B,CAA7B,CAAA;AADM,SAAA,MAEA;AACN,UAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AACA;AARF,OAAA,CASE,OAAA,CAAA,EAAU;AACX,QAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA;AAZF,KAAA;;AAcA,WAAA,MAAA;AA9BD,GAAA;;AAgCA,SAAA,KAAA;AAlCM,CAA4B,EAA5B;;AAgEA,SAAA,cAAA,CAAA,QAAA,EAAkC;AACxC,SAAOM,QAAQ,YAARA,KAAAA,IAA6BA,QAAQ,CAARA,CAAAA,GAApC,CAAA;AACA;;AAmRM,SAAA,GAAA,CAAA,IAAA,EAAA,IAAA,EAAyB;AAC/B,MAAA,SAAA;;AACA,KAAG;AACF,QAAIpE,MAAM,GAAGC,IAAb,EAAA;;AACA,QAAID,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,UAAI,cAAA,CAAJ,MAAI,CAAJ,EAA4B;AAC3BA,QAAAA,MAAM,GAAGA,MAAM,CAAfA,CAAAA;AADD,OAAA,MAEO;AACN0E,QAAAA,SAAS,GAATA,IAAAA;AACA;AACA;AACD;;AACD,QAAIC,cAAc,GAAGC,IAArB,EAAA;;AACA,QAAI,cAAA,CAAJ,cAAI,CAAJ,EAAoC;AACnCD,MAAAA,cAAc,GAAGA,cAAc,CAA/BA,CAAAA;AACA;;AACD,QAAI,CAAJ,cAAA,EAAqB;AACpB,aAAA,MAAA;AACA;AAhBF,GAAA,QAiBS,CAACA,cAAc,CAjBxB,IAAA;;AAkBA,MAAMX,IAAI,GAAG,IAAb,KAAa,EAAb;;AACA,MAAMpE,MAAM,GAAG,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAf,CAAe,CAAf;;AACA,GAAC8E,SAAS,GAAG1E,MAAM,CAANA,IAAAA,CAAH,gBAAGA,CAAH,GAAmC2E,cAAc,CAAdA,IAAAA,CAA7C,gBAA6CA,CAA7C,EAAA,IAAA,CAAyF,KAAzF,CAAA,EAAA,MAAA;AACA,SAAA,IAAA;;AACA,WAAA,gBAAA,CAAA,KAAA,EAAiC;AAChC3E,IAAAA,MAAM,GAANA,KAAAA;;AACA,aAAS;AACR2E,MAAAA,cAAc,GAAGC,IAAjBD,EAAAA;;AACA,UAAI,cAAA,CAAJ,cAAI,CAAJ,EAAoC;AACnCA,QAAAA,cAAc,GAAGA,cAAc,CAA/BA,CAAAA;AACA;;AACD,UAAI,CAAJ,cAAA,EAAqB;AACpB;AACA;;AACD,UAAIA,cAAc,CAAlB,IAAA,EAAyB;AACxBA,QAAAA,cAAc,CAAdA,IAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,CAA2C,KAA3CA,CAAAA,EAAAA,MAAAA;AACA;AACA;;AACD3E,MAAAA,MAAM,GAAGC,IAATD,EAAAA;;AACA,UAAIA,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,YAAI,cAAA,CAAJ,MAAI,CAAJ,EAA4B;AAC3BA,UAAAA,MAAM,GAAGA,MAAM,CAAfA,CAAAA;AADD,SAAA,MAEO;AACNA,UAAAA,MAAM,CAANA,IAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,CAAmC,KAAnCA,CAAAA,EAAAA,MAAAA;AACA;AACA;AACD;AACD;;AACD,IAAA,OAAA,CAAA,IAAA,EAAA,CAAA,EAAA,MAAA,CAAA;AACA;;AACD,WAAA,gBAAA,CAAA,cAAA,EAA0C;AACzC,QAAA,cAAA,EAAoB;AACnB,SAAG;AACFA,QAAAA,MAAM,GAAGC,IAATD,EAAAA;;AACA,YAAIA,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,cAAI,cAAA,CAAJ,MAAI,CAAJ,EAA4B;AAC3BA,YAAAA,MAAM,GAAGA,MAAM,CAAfA,CAAAA;AADD,WAAA,MAEO;AACNA,YAAAA,MAAM,CAANA,IAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,CAAmC,KAAnCA,CAAAA,EAAAA,MAAAA;AACA;AACA;AACD;;AACD2E,QAAAA,cAAc,GAAGC,IAAjBD,EAAAA;;AACA,YAAI,cAAA,CAAJ,cAAI,CAAJ,EAAoC;AACnCA,UAAAA,cAAc,GAAGA,cAAc,CAA/BA,CAAAA;AACA;;AACD,YAAI,CAAJ,cAAA,EAAqB;AACpB,UAAA,OAAA,CAAA,IAAA,EAAA,CAAA,EAAA,MAAA,CAAA;;AACA;AACA;AAjBF,OAAA,QAkBS,CAACA,cAAc,CAlBxB,IAAA;;AAmBAA,MAAAA,cAAc,CAAdA,IAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,CAA2C,KAA3CA,CAAAA,EAAAA,MAAAA;AApBD,KAAA,MAqBO;AACN,MAAA,OAAA,CAAA,IAAA,EAAA,CAAA,EAAA,MAAA,CAAA;AACA;AACD;AACD;;AA5TM,SAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAAgC;AACtC,SAAOnM,KAAK,IAAIA,KAAK,CAAdA,IAAAA,GAAsBA,KAAK,CAALA,IAAAA,CAAtBA,IAAsBA,CAAtBA,GAAyCqF,IAAI,CAApD,KAAoD,CAApD;AACA;;AAlCM,SAAA,QAAA,CAAA,CAAA,EAAmB;AACzB,SAAO,YAAW;AACjB,SAAK,IAAI5E,IAAIuC,GAAR,EAAA,EAAe9B,CAAC,GAArB,CAAA,EAA2BA,CAAC,GAAG2D,SAAS,CAAxC,MAAA,EAAiD3D,CAAjD,EAAA,EAAsD;AACrDT,MAAAA,IAAI,CAAJA,CAAI,CAAJA,GAAUoE,SAAS,CAAnBpE,CAAmB,CAAnBA;AACA;;AACD,QAAI;AACH,aAAOsE,OAAO,CAAPA,OAAAA,CAAgBC,CAAC,CAADA,KAAAA,CAAAA,IAAAA,EAAvB,IAAuBA,CAAhBD,CAAP;AADD,KAAA,CAEE,OAAA,CAAA,EAAS;AACV,aAAOA,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;AACA;AARF,GAAA;AAUA;;AAwgBM,SAAA,QAAA,CAAA,MAAA,EAAA,KAAA,EAAiC;AACvC,MAAA,MAAA,EACC,MAAA,KAAA;AACD,SAAA,KAAA;AACA;;AA9BM,SAAA,gBAAA,CAAA,IAAA,EAAA,SAAA,EAA2C;AACjD,MAAI;AACH,QAAIyC,MAAM,GAAGC,IAAb,EAAA;AADD,GAAA,CAEE,OAAA,CAAA,EAAU;AACX,WAAO4E,SAAS,CAAA,IAAA,EAAhB,CAAgB,CAAhB;AACA;;AACD,MAAI7E,MAAM,IAAIA,MAAM,CAApB,IAAA,EAA2B;AAC1B,WAAOA,MAAM,CAANA,IAAAA,CAAY6E,SAAS,CAATA,IAAAA,CAAAA,IAAAA,EAAZ7E,KAAY6E,CAAZ7E,EAAyC6E,SAAS,CAATA,IAAAA,CAAAA,IAAAA,EAAhD,IAAgDA,CAAzC7E,CAAP;AACA;;AACD,SAAO6E,SAAS,CAAA,KAAA,EAAhB,MAAgB,CAAhB;AACA;;AAlkBM,SAAA,gBAAA,GAAmC;AACxC,MAAMvB,YAAY,GAAGjL,KAAK,CAA1B,MAAqBA,EAArB;;AADwC,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANY,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,IAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAAA,MAAA,aAAA,GAEDqF,YAAY,CAFX,IAEW,CAFX;AAAA,MAEnCpF,QAFmC,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MAEzBC,OAFyB,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MAAA,cAAA,GAAA,aAAA,CAAA,CAAA,CAAA;AAAA,MAEhBC,MAFgB,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;;AAAA,MAIhCmK,YAJgC,GAIfnK,MAJe,CAAA,YAAA;AAKxC,MAAMoK,eAAe,GAAGnB,YAAY,CALI,YAKJ,CAApC,CALwC,CAAA;;AAQxC,MAAMoB,eAAe,GAArB,OAAA;AAEAtK,EAAAA,OAAO,GAAA,QAAA,CAAA,YAAe;AAAA,QAAA,UAAA,GAAA,KAAA;AACpB,QAAM4H,IAAI,GAAV,EAAA;AACA,QAAM2C,aAAa,GAAA,GAAA,MAAA,CAAOJ,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAA1B,aAAmB,CAAnB;AACA,QAAMK,oBAAoB,GAA1B,EAAA;AAHoB,WAAA,SAAA,CAAA,GAAA,CAAA,YAKjB;AACD,UAAM1K,IAAI,GAAGyK,aAAa,CAA1B,KAAaA,EAAb;AADC,aAAA,cAAA,CAAA,YAAA;AAAA,YAGG,CAAC3C,IAAI,CAHR,MAAA,EAAA;AAAA,cAAA,MAAA,GAKC,IAAI,CALL,IAAA,CAAA,CAIC;;AAJD,iBAAA,QAAA,CAKiB0C,eAAe,CAAfA,KAAAA,CAAAA,KAAAA,CAAAA,EALjB,IAKiBA,CALjB,EAAA,UAAA,gBAAA,EAAA;AAKC,YAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,gBAAA;;AACAE,YAAAA,oBAAoB,CAApBA,IAAAA,CAAAA,IAAAA;AAND,WAAA,CAAA;AAAA,SAAA,MAAA;AAQC;AACA,cAAMI,UAAU,GAAGP,eAAe,GAAGzC,IAAI,CAACA,IAAI,CAAJA,MAAAA,GAAR,CAAO,CAAP,EATnC,IASmC,CAAlC,CATD,CAAA;AAYC;AACA;;AACA,cAAI,CAAJ,UAAA,EAAiB;AAAA,YAAA,UAAA,GAAA,IAAA;AAAA;AAEhB;;AAED,cAAMkD,QAAQ,GAAA,GAAA,MAAA,CAETC,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAc,CAFL,CAETA,CAFS,EAAA,CAAd,UAAc,CAAA,CAAd;AAlBD,cAAA,MAAA,GAwBC,IAAI1L,CAxBL,IAAA;AAAA,iBAAA,QAAA,CAwBiBiL,eAAe,CAAfA,KAAAA,CAAAA,KAAAA,CAAAA,EAxBjB,QAwBiBA,CAxBjB,EAAA,UAAA,iBAAA,EAAA;AAwBC,YAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,iBAAA;;AACAE,YAAAA,oBAAoB,CAApBA,IAAAA,CAAAA,QAAAA;AAzBD,WAAA,CAAA;AAAA;AAAA,OAAA,CAAA;AALiB,KAAA,EAAA,YAAA;AAAA,aAAA,CAAA,UAAA,IAAA,CAAA,CAgCXD,aAAa,CAhCF,MAAA;AAAA,KAAA,CAAA,EAAA,YAAA;AAkCpBJ,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,YAAAA,GAA0CE,eAAe,GACvDhL,IAAI,CAAC,IAAIA,CAAJ,MAAA,GADkD,CACnD,CADmD,EAAzD8K,IAAyD,CAAzDA;AAIAA,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAAAA,oBAAAA;AAEA,aAAA,IAAA;AAxCoB,KAAA,CAAA;AAAtBnK,GAAO,CAAPA;AA2CA,MAAMK,SAAS,GAAGuJ,YAAY,CAAA,QAAA,EAAA,OAAA,EAA9B,MAA8B,CAA9B;;AAEA,MACE,OAAOvJ,SAAS,CAATA,KAAAA,CAAP,YAAA,KAAA,WAAA,IACA,OAAOA,SAAS,CAAhB,IAAA,KAFF,WAAA,EAGE;AACAA,IAAAA,SAAS,CAATA,KAAAA,CAAAA,YAAAA,GAA+BgK,eAAe,GAC5ChK,SAAS,CAATA,IAAAA,CAAeA,SAAS,CAATA,IAAAA,CAAAA,MAAAA,GAD6B,CAC5CA,CAD4C,EAE5CA,SAAS,CAFXA,IAA8C,CAA9CA;AAID;;AAED,EAAA,YAAY,CAAZ,OAAA,GAAA,SAAA;AAjEwC,MAAA,eAAA,GAsEpCA,SAtEoC,CAAA,IAAA;AAAA,MAoEtCuH,IApEsC,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,eAAA;AAAA,MAqE7BH,YArE6B,GAsEpCpH,SAtEoC,CAAA,KAsEpCA,CAtEoC,YAAA,CAAA,CAAA;;AAyExC,MAAI,CAACA,SAAS,CAATA,KAAAA,CAAL,aAAA,EAAoC;AAClCA,IAAAA,SAAS,CAATA,KAAAA,CAAAA,aAAAA,GAAgC,CAAA,GAAA,MAAA,CAAKA,SAAS,CAATA,KAAAA,CAArCA,QAAgC,CAAA,CAAhCA;AACD;;AAED,MAAM6K,SAAS,GAAG,KAAK,CAAL,WAAA,CAChB,UAAA,aAAA,EAAA,KAAA,EAAA;AAAA,QACEC,aADF,KAAA,KAAA,CAAA,EAAA;AACEA,MAAAA,aADF,GACkBhB,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CADlB,YACEgB;AADF;;AAAA,QAAA,IAAA,GAAA,KAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,KAAA;AAAA,QAAA,aAAA,GAAA,IAAA,CAAA,QAAA;AAAA,QAEIC,QAFJ,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,aAAA;;AAAA,WAIE,YAAY1E,CAAZ,OAAA,CAAA,KAAA,CAAA,YAAA,GACI,YAAY,CAAZ,OAAA,CAAA,KAAA,CAAA,KAAA,CAAiC;AAC/BC,MAAAA,SAAS,EAAA,QAAA,CAAA,YAAqB;AAAA,aAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAT7G,IAAS,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAATA,UAAAA,IAAS,CAAA,KAAA,CAATA,GAAS,SAAA,CAAA,KAAA,CAATA;AAAS;;AAAA,eAAA,gBAAA,CAAA,YACxB;AACFqK,UAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAoC,UAAA,GAAA,EAAG;AAAA,mBAAA,QAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAErCkB,cAAAA,cAAc,EAAED,QAAQ,GAAA,UAAA,GAAgB;AAFH,aAAA,CAAA;AAAvCjB,WAAAA;AAKA,cAAMmB,OAAO,GAAGF,QAAQ,GAAA,CAAA,aAAA,EAAA,MAAA,CAAA,IAAA,CAAA,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,CAAxB,aAAwB,CAAA,CAAxB;AAGAjB,UAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,CACEiB,QAAQ/L,GAAAA,SAAAA,GADV8K,MAAAA,EAAAA,OAAAA;AATE,iBAAA,QAAA,CAaoBG,eAAe,CAAfA,KAAAA,CAAAA,KAAAA,CAAAA,EAbpB,OAaoBA,CAbpB,EAAA,UAAA,OAAA,EAAA;AAeF,gBAAM1C,IAAI,GAAGwD,QAAQ,GAAA,CAAA,OAAA,EAAA,MAAA,CACJjB,YAAY,CAAZA,OAAAA,CADI,IAAA,CAAA,GAAA,GAAA,MAAA,CAEbA,YAAY,CAAZA,OAAAA,CAFa,IAAA,EAAA,CAArB,OAAqB,CAAA,CAArB;AAIAA,YAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,YAAAA,GAA0CE,eAAe,GAAA,OAAA,EAAzDF,IAAyD,CAAzDA;AAKA,mBAAA,IAAA;AAxBE,WAAA,CAAA;AADwB,SAAA,EAAA,UAAA,UAAA,EAAA,OAAA,EAAA;AA2B1BA,UAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAoC,UAAA,GAAA,EAAG;AAAA,mBAAA,QAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAErCkB,cAAAA,cAAc,EAAE;AAFqB,aAAA,CAAA;AAAvClB,WAAAA;AA3B0B,iBAAA,QAAA,CAAA,UAAA,EAAA,OAAA,CAAA;AAAA,SAAA,CAAA;AAArB,OAAA;AADsB,KAAjC,CADJ,GAoCI,KAxCN,CAAA;AADgB,GAAA,EA0ChB,CAAA,eAAA,EA1CF,eA0CE,CA1CgB,CAAlB;AA6CAN,EAAAA,cAAc,CAAdA,SAAc,CAAdA;AAEA,SAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEEjC,IAAAA,IAAI,EAFN,IAAA;AAGEH,IAAAA,YAAY,EAHd,YAAA;AAIEyD,IAAAA,SAAS,EAATA;AAJF,GAAA,CAAA;AAMD","sourcesContent":["import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, queryFn, config = {} } = args[0]\n      return [queryKey, queryFn, config, ...args.slice(1)]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n\n  const [queryKey, queryFn, config = {}, ...rest] = args\n\n  return [queryKey, queryFn, config, ...rest]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (\n    queryInfo.query.config.suspense ||\n    queryInfo.query.config.useErrorBoundary\n  ) {\n    if (\n      queryInfo.query.state.status === statusError &&\n      queryInfo.query.state.throwInErrorBoundary\n    ) {\n      throw queryInfo.error\n    }\n\n    if (queryInfo.query.config.suspense && queryInfo.status !== statusSuccess) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.query.fetch()\n    }\n  }\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n","import React from 'react'\nimport { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const configContext = React.createContext()\n\nconst DEFAULTS = {\n  shared: {\n    suspense: false,\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n  },\n  queries: {\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false,\n  },\n  mutations: {\n    throwOnError: false,\n    onMutate: noop,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false,\n  },\n}\n\nexport const defaultConfigRef = {\n  current: DEFAULTS,\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = useConfigContext()\n\n  const newConfig = React.useMemo(() => {\n    const { shared = {}, queries = {}, mutations = {} } = config\n    const {\n      shared: contextShared = {},\n      queries: contextQueries = {},\n      mutations: contextMutations = {},\n    } = configContextValue\n    return {\n      shared: {\n        ...contextShared,\n        ...shared,\n      },\n      queries: {\n        ...contextQueries,\n        ...queries,\n      },\n      mutations: {\n        ...contextMutations,\n        ...mutations,\n      },\n    }\n  }, [config, configContextValue])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = { ...(configContextValue || DEFAULTS) }\n    }\n  }, [configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nfunction invalidQueryKey() {\n  throw new Error('A valid query key is required!')\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    invalidQueryKey()\n  }\n\n  if (!Array.isArray(queryKey)) {\n    queryKey = [queryKey]\n  }\n\n  if (queryKey.some(d => typeof d === 'function')) {\n    invalidQueryKey()\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  if (!queryHash) {\n    invalidQueryKey()\n  }\n\n  return [queryHash, queryKey]\n}\n","import React from 'react'\nimport {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n  uid,\n  statusIdle,\n  Console,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nexport const queryCacheContext = React.createContext(queryCache)\n\nexport const queryCaches = [queryCache]\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport function ReactQueryCacheProvider({ queryCache, children }) {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear()\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n\nconst actionInit = 'Init'\nconst actionFailed = 'Failed'\nconst actionMarkStale = 'MarkStale'\nconst actionMarkGC = 'MarkGC'\nconst actionFetch = 'Fetch'\nconst actionSuccess = 'Success'\nconst actionError = 'Error'\nconst actionSetState = 'SetState'\n\nexport function makeQueryCache({ frozen = isServer, defaultConfig } = {}) {\n  // A frozen cache does not add new queries to the cache\n  const globalListeners = []\n\n  const configRef = defaultConfig\n    ? { current: defaultConfig }\n    : defaultConfigRef\n\n  const queryCache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    queryCache.isFetching = Object.values(queryCache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    globalListeners.forEach(d => d(queryCache))\n  }\n\n  queryCache.subscribe = cb => {\n    globalListeners.push(cb)\n    return () => {\n      globalListeners.splice(globalListeners.indexOf(cb), 1)\n    }\n  }\n\n  queryCache.clear = ({ notify = true } = {}) => {\n    Object.values(queryCache.queries).forEach(query => query.clear())\n    queryCache.queries = {}\n    if (notify) {\n      notifyGlobalListeners()\n    }\n  }\n\n  queryCache.getQueries = (predicate, { exact } = {}) => {\n    if (predicate === true) {\n      return Object.values(queryCache.queries)\n    }\n\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = configRef.current.shared.queryKeySerializerFn(predicate)\n\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(queryCache.queries).filter(predicate)\n  }\n\n  queryCache.getQuery = queryKey =>\n    queryCache.getQueries(queryKey, { exact: true })[0]\n\n  queryCache.getQueryData = queryKey =>\n    queryCache.getQuery(queryKey)?.state.data\n\n  queryCache.removeQueries = (...args) => {\n    queryCache.getQueries(...args).forEach(query => query.clear())\n  }\n\n  queryCache.cancelQueries = (...args) => {\n    queryCache.getQueries(...args).forEach(query => query.cancel())\n  }\n\n  queryCache.invalidateQueries = async (\n    predicate,\n    { refetchActive = true, exact, throwOnError } = {}\n  ) => {\n    try {\n      return await Promise.all(\n        queryCache.getQueries(predicate, { exact }).map(query => {\n          if (refetchActive && query.instances.length) {\n            return query.fetch()\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  queryCache.resetErrorBoundaries = () => {\n    queryCache.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  queryCache.buildQuery = (userQueryKey, queryFn, config = {}) => {\n    config = {\n      ...configRef.current.shared,\n      ...configRef.current.queries,\n      ...config,\n    }\n\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = queryCache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryFn, config })\n    } else {\n      query = makeQuery({\n        queryCache,\n        queryKey,\n        queryHash,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (!frozen) {\n        queryCache.queries[queryHash] = query\n\n        if (isServer) {\n          notifyGlobalListeners()\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    query.fallbackInstance = {\n      config: {\n        onSuccess: query.config.onSuccess,\n        onError: query.config.onError,\n        onSettled: query.config.onSettled,\n      },\n    }\n\n    return query\n  }\n\n  queryCache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryFn,\n      config,\n      { force, throwOnError } = {},\n    ] = getQueryArgs(args)\n\n    try {\n      const query = queryCache.buildQuery(queryKey, queryFn, config)\n      if (force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  queryCache.setQueryData = (queryKey, updater, config = {}) => {\n    let query = queryCache.getQuery(queryKey)\n\n    if (!query) {\n      query = queryCache.buildQuery(queryKey, () => new Promise(noop), config)\n    }\n\n    query.setData(updater)\n  }\n\n  function makeQuery({ queryCache, queryKey, queryHash, queryFn, config }) {\n    const initialData =\n      typeof config.initialData === 'function'\n        ? config.initialData()\n        : config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = !config.enabled || !hasInitialData\n\n    const initialStatus = hasInitialData\n      ? statusSuccess\n      : config.enabled\n      ? statusLoading\n      : statusIdle\n\n    let query = {\n      queryKey,\n      queryHash,\n      queryFn,\n      config,\n      instances: [],\n      state: queryReducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n      }),\n    }\n\n    query.dispatch = action => {\n      query.state = queryReducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (isServer) return\n      clearTimeout(query.staleTimeout)\n\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          query.invalidate()\n        }\n      }, query.config.staleTime)\n    }\n\n    query.invalidate = () => {\n      clearTimeout(query.staleTimeout)\n      query.dispatch({ type: actionMarkStale })\n    }\n\n    query.scheduleGarbageCollection = () => {\n      if (query.config.cacheTime === Infinity) {\n        return\n      }\n      query.dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          queryCache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.cancel = () => {\n      query.cancelled = cancelledError\n\n      if (query.cancelPromises) {\n        query.cancelPromises()\n      }\n\n      delete query.promise\n    }\n\n    query.clearIntervals = () => {\n      query.instances.forEach(instance => {\n        instance.clearInterval()\n      })\n    }\n\n    query.setState = updater =>\n      query.dispatch({ type: actionSetState, updater })\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      query.dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      query.scheduleStaleTimeout()\n    }\n\n    query.clear = () => {\n      clearTimeout(query.staleTimeout)\n      clearTimeout(query.cacheTimeout)\n      clearTimeout(query.retryTimeout)\n      query.clearIntervals()\n      query.cancel()\n      query.dispatch = noop\n      delete queryCache.queries[query.queryHash]\n    }\n\n    query.subscribe = (onStateUpdate = noop) => {\n      const instance = {\n        id: uid(),\n        onStateUpdate,\n      }\n\n      query.instances.push(instance)\n\n      query.heal()\n\n      instance.clearInterval = () => {\n        clearInterval(instance.refetchIntervalId)\n        delete instance.refetchIntervalId\n      }\n\n      instance.updateConfig = config => {\n        const oldConfig = instance.config\n\n        // Update the config\n        instance.config = config\n\n        if (!isServer) {\n          if (oldConfig?.refetchInterval === config.refetchInterval) {\n            return\n          }\n\n          query.clearIntervals()\n\n          const minInterval = Math.min(\n            ...query.instances.map(d => d.config.refetchInterval || Infinity)\n          )\n\n          if (\n            !instance.refetchIntervalId &&\n            minInterval > 0 &&\n            minInterval < Infinity\n          ) {\n            instance.refetchIntervalId = setInterval(() => {\n              if (\n                isDocumentVisible() ||\n                query.instances.some(\n                  instance => instance.config.refetchIntervalInBackground\n                )\n              ) {\n                query.fetch()\n              }\n            }, minInterval)\n          }\n        }\n      }\n\n      instance.run = async () => {\n        try {\n          // Perform the refetch for this query if necessary\n          if (\n            query.config.enabled && // Don't auto refetch if disabled\n            !query.wasSuspended && // Don't double refetch for suspense\n            query.state.isStale && // Only refetch if stale\n            (query.config.refetchOnMount || query.instances.length === 1)\n          ) {\n            await query.fetch()\n          }\n\n          query.wasSuspended = false\n        } catch (error) {\n          Console.error(error)\n        }\n      }\n\n      instance.unsubscribe = () => {\n        query.instances = query.instances.filter(d => d.id !== instance.id)\n\n        if (!query.instances.length) {\n          query.clearIntervals()\n          query.cancel()\n\n          if (!isServer) {\n            // Schedule garbage collection\n            query.scheduleGarbageCollection()\n          }\n        }\n      }\n\n      return instance\n    }\n\n    // Set up the core fetcher function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelPromises = () => promise.cancel?.()\n\n        const data = await promise\n        delete query.shouldContinueRetryOnFocus\n\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        query.dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            query.retryTimeout = setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ __queryFn = query.queryFn } = {}) => {\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          const callbackInstances = [...query.instances]\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.fallbackInstance)\n          }\n\n          try {\n            // Set up the query refreshing state\n            query.dispatch({ type: actionFetch })\n\n            // Try to get the data\n            let data = await tryFetchData(__queryFn, ...query.queryKey)\n\n            query.setData(old =>\n              query.config.isDataEqual(old, data) ? old : data\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.config.onSuccess &&\n                instance.config.onSuccess(query.state.data)\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.config.onSettled &&\n                instance.config.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            query.dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(\n                instance =>\n                  instance.config.onError && instance.config.onError(error)\n              )\n\n              callbackInstances.forEach(\n                instance =>\n                  instance.config.onSettled &&\n                  instance.config.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    return query\n  }\n\n  return queryCache\n}\n\nexport function queryReducer(state, action) {\n  const newState = switchActions(state, action)\n\n  Object.assign(newState, {\n    isLoading: newState.status === statusLoading,\n    isSuccess: newState.status === statusSuccess,\n    isError: newState.status === statusError,\n    isIdle: newState.status === statusIdle,\n  })\n\n  return newState\n}\n\nfunction switchActions(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status:\n          typeof state.data !== 'undefined' ? statusSuccess : statusLoading,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (!query.instances.some(instance => instance.config.enabled)) {\n            return false\n          }\n\n          if (!query.state.isStale) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return query.config.refetchOnWindowFocus\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\nimport { useMountedCallback } from './utils'\nimport { useQueryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const queryCache = useQueryCache()\n  const [state, unsafeRerender] = React.useReducer(d => d + 1, 1)\n  const rerender = useMountedCallback(unsafeRerender)\n\n  React.useEffect(() => queryCache.subscribe(rerender), [queryCache, rerender])\n\n  return React.useMemo(() => state && queryCache.isFetching, [\n    queryCache.isFetching,\n    state,\n  ])\n}\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext().shared,\n    ...useConfigContext().mutations,\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [\n    mutate,\n    {\n      ...state,\n      reset,\n      isIdle: state.status === statusIdle,\n      isLoading: state.status === statusLoading,\n      isSuccess: state.status === statusSuccess,\n      isError: state.status === statusError,\n    },\n  ]\n}\n","import React from 'react'\n\n//\n\nimport { useQueryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport { useMountedCallback, Console } from './utils'\n\nexport function useBaseQuery(queryKey, queryFn, config = {}) {\n  // Make a rerender function\n  const rerender = useMountedCallback(React.useState()[1])\n\n  // Build the final config\n  const configContext = useConfigContext()\n\n  config = {\n    ...configContext.shared,\n    ...configContext.queries,\n    ...config,\n  }\n\n  // Get the query cache\n  const queryCache = useQueryCache()\n\n  // Build the query for use\n  const query = queryCache.buildQuery(queryKey, queryFn, config)\n\n  // Create a query instance ref\n  const instanceRef = React.useRef()\n\n  // Subscribe to the query when the subscribe function changes\n  React.useEffect(() => {\n    instanceRef.current = query.subscribe(() => rerender({}))\n\n    // Unsubscribe when things change\n    return instanceRef.current.unsubscribe\n  }, [query, rerender])\n\n  // Always update the config\n  React.useEffect(() => {\n    instanceRef.current.updateConfig(config)\n  })\n\n  // Run the instance when the query or enabled change\n  React.useEffect(() => {\n    if (config.enabled && query) {\n      // Just for change detection\n    }\n    instanceRef.current.run()\n  }, [config.enabled, query])\n\n  const refetch = React.useCallback(async () => {\n    try {\n      await query.fetch()\n    } catch (error) {\n      Console.error(error)\n    }\n  }, [query])\n\n  return {\n    query,\n    refetch,\n    ...query.state,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryFn, config)\n\n  if (!queryInfo.query.config.enabled) {\n    lastDataRef.current = undefined\n  }\n\n  let { data: latestData, status } = queryInfo\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    const overrides = {\n      status: 'success',\n      isError: false,\n      isLoading: false,\n      isSuccess: true,\n    }\n\n    Object.assign(queryInfo.query.state, overrides)\n    Object.assign(queryInfo, overrides)\n  }\n\n  const paginatedQueryInfo = {\n    ...queryInfo,\n    resolvedData,\n    latestData,\n  }\n\n  handleSuspense(paginatedQueryInfo)\n\n  return paginatedQueryInfo\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = []\n    const pageVariables = [...queryInfoRef.current.query.pageVariables]\n    const rebuiltPageVariables = []\n\n    do {\n      const args = pageVariables.shift()\n\n      if (!data.length) {\n        // the first page query doesn't need to be rebuilt\n        data.push(await originalQueryFn(...args))\n        rebuiltPageVariables.push(args)\n      } else {\n        // get an up-to-date cursor based on the previous data set\n        const nextCursor = getGetFetchMore()(data[data.length - 1], data)\n\n        // break early if there's no next cursor\n        // otherwise we'll start from the beginning\n        // which will cause unwanted duplication\n        if (!nextCursor) {\n          break\n        }\n\n        const pageArgs = [\n          // remove the last argument (the previously saved cursor)\n          ...args.slice(0, -1),\n          nextCursor,\n        ]\n\n        data.push(await originalQueryFn(...pageArgs))\n        rebuiltPageVariables.push(pageArgs)\n      }\n    } while (pageVariables.length)\n\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    queryInfoRef.current.query.pageVariables = rebuiltPageVariables\n\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [[...queryInfo.query.queryKey]]\n  }\n\n  const fetchMore = React.useCallback(\n    (\n      fetchMoreInfo = queryInfoRef.current.query.canFetchMore,\n      { previous = false } = {}\n    ) =>\n      queryInfoRef.current.query.canFetchMore\n        ? queryInfoRef.current.query.fetch({\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: previous ? 'previous' : 'next',\n                }))\n\n                const newArgs = previous\n                  ? [fetchMoreInfo, ...args]\n                  : [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables[\n                  previous ? 'unshift' : 'push'\n                ](newArgs)\n\n                const newData = await originalQueryFn(...newArgs)\n\n                const data = previous\n                  ? [newData, ...queryInfoRef.current.data]\n                  : [...queryInfoRef.current.data, newData]\n\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  newData,\n                  data\n                )\n\n                return data\n              } finally {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: false,\n                }))\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn]\n  )\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}